<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceuw12_1_1integrals" kind="namespace" language="C++">
    <compoundname>uw12::integrals</compoundname>
    <innerclass refid="classuw12_1_1integrals_1_1_base_integrals" prot="public">uw12::integrals::BaseIntegrals</innerclass>
    <innerclass refid="classuw12_1_1integrals_1_1_integrals" prot="public">uw12::integrals::Integrals</innerclass>
    <innernamespace refid="namespaceuw12_1_1integrals_1_1transformations">uw12::integrals::transformations</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="integral__functions_8hpp_1a3c793d4d9d261b0557c7d6240ebf2bc4" prot="public" static="no">
        <type>std::function&lt; linalg::Mat()&gt;</type>
        <definition>using uw12::integrals::TwoIndexFn =  std::function&lt;linalg::Mat()&gt;</definition>
        <argsstring></argsstring>
        <name>TwoIndexFn</name>
        <qualifiedname>uw12::integrals::TwoIndexFn</qualifiedname>
        <briefdescription>
<para>Function which returns a matrix of two-index integrals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/integral_functions.hpp" line="16" column="1" bodyfile="src/integrals/integral_functions.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="integral__functions_8hpp_1ac67c21716121f743ab61bb80a8b0094f" prot="public" static="no">
        <type>std::function&lt; linalg::Mat(size_t)&gt;</type>
        <definition>using uw12::integrals::ThreeIndexFn =  std::function&lt;linalg::Mat(size_t)&gt;</definition>
        <argsstring></argsstring>
        <name>ThreeIndexFn</name>
        <qualifiedname>uw12::integrals::ThreeIndexFn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function which returns a matrix of three-index integrals for a single shell of third index </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/integral_functions.hpp" line="20" column="1" bodyfile="src/integrals/integral_functions.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="base__integrals_8cpp_1a1a26245887174b1228971039fbe6e2b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::integrals::calculate_n_df</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;df_sizes)</argsstring>
        <name>calculate_n_df</name>
        <qualifiedname>uw12::integrals::calculate_n_df</qualifiedname>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>df_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/base_integrals.cpp" line="8" column="6" bodyfile="src/integrals/base_integrals.cpp" bodystart="8" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="base__integrals_8cpp_1a13f9e9940d8088e8051ca751c1803610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t uw12::integrals::calculate_n_ao</definition>
        <argsstring>(const linalg::Mat &amp;J3)</argsstring>
        <name>calculate_n_ao</name>
        <qualifiedname>uw12::integrals::calculate_n_ao</qualifiedname>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>J3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/base_integrals.cpp" line="16" column="8" bodyfile="src/integrals/base_integrals.cpp" bodystart="16" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="base__integrals_8cpp_1a291ec893cbf51b31d30fedcbb14321bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::integrals::calculate_n_ri</definition>
        <argsstring>(const linalg::Mat &amp;J3, const size_t n_ao)</argsstring>
        <name>calculate_n_ri</name>
        <qualifiedname>uw12::integrals::calculate_n_ri</qualifiedname>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>J3</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_ao</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/base_integrals.cpp" line="29" column="6" bodyfile="src/integrals/base_integrals.cpp" bodystart="29" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="integral__functions_8hpp_1a3480e191b4e408154012b31e5f95d23b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>linalg::Mat</type>
        <definition>linalg::Mat uw12::integrals::coulomb_3idx</definition>
        <argsstring>(const ThreeIndexFn &amp;three_index_fn, const std::vector&lt; size_t &gt; &amp;df_offsets, const size_t n_rows, const size_t n_df)</argsstring>
        <name>coulomb_3idx</name>
        <qualifiedname>uw12::integrals::coulomb_3idx</qualifiedname>
        <param>
          <type>const ThreeIndexFn &amp;</type>
          <declname>three_index_fn</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>df_offsets</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_rows</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_df</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the three-index Coulomb matrix <formula id="47">$(\mu\nu | w | A)$</formula></para>
<para>Use a <computeroutput>three_index_fn</computeroutput> for each density-fitting basis shell to calculate the total three-index matrix</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>three_index_fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to calculate integrals for each basis shell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>df_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>offsets in full matrix for each df basis shell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows of the matrix (depends on the <computeroutput>three_index_fn</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_df</parametername>
</parameternamelist>
<parameterdescription>
<para>number of df basis functions</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Three-index matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/integral_functions.hpp" line="33" column="20" bodyfile="src/integrals/integral_functions.hpp" bodystart="33" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="integrals_8cpp_1a08669984b28c5f82267d5f0bcd414565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntegralFunc</type>
          </param>
          <param>
            <type>typename TransformFunc</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; linalg::Mat &gt;</type>
        <definition>std::vector&lt; linalg::Mat &gt; uw12::integrals::calculate_integrals_direct</definition>
        <argsstring>(const BaseIntegrals &amp;base_integrals, const IntegralFunc &amp;integral_fn, const TransformFunc &amp;transform_fn, const std::vector&lt; size_t &gt; &amp;n_rows)</argsstring>
        <name>calculate_integrals_direct</name>
        <qualifiedname>uw12::integrals::calculate_integrals_direct</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">BaseIntegrals</ref> &amp;</type>
          <declname>base_integrals</declname>
        </param>
        <param>
          <type>const IntegralFunc &amp;</type>
          <declname>integral_fn</declname>
        </param>
        <param>
          <type>const TransformFunc &amp;</type>
          <declname>transform_fn</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>n_rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/integrals.cpp" line="17" column="13" bodyfile="src/integrals/integrals.cpp" bodystart="17" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="integrals_8cpp_1a061285f8ce7ae2cec5888be9dcc9c0c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; linalg::Mat &gt;</type>
        <definition>std::vector&lt; linalg::Mat &gt; uw12::integrals::calculate_X3idx_one_trans_direct</definition>
        <argsstring>(const BaseIntegrals &amp;base_integrals, const utils::Orbitals &amp;orbitals)</argsstring>
        <name>calculate_X3idx_one_trans_direct</name>
        <qualifiedname>uw12::integrals::calculate_X3idx_one_trans_direct</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">BaseIntegrals</ref> &amp;</type>
          <declname>base_integrals</declname>
        </param>
        <param>
          <type>const utils::Orbitals &amp;</type>
          <declname>orbitals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/integrals.cpp" line="54" column="13" bodyfile="src/integrals/integrals.cpp" bodystart="54" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="integrals_8cpp_1a550024e8ec18f1821e0417e294f5bff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; linalg::Mat &gt;</type>
        <definition>std::vector&lt; linalg::Mat &gt; uw12::integrals::calculate_X3idx_one_trans_direct_ri</definition>
        <argsstring>(const BaseIntegrals &amp;base_integrals, const utils::Orbitals &amp;active_orbitals)</argsstring>
        <name>calculate_X3idx_one_trans_direct_ri</name>
        <qualifiedname>uw12::integrals::calculate_X3idx_one_trans_direct_ri</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">BaseIntegrals</ref> &amp;</type>
          <declname>base_integrals</declname>
        </param>
        <param>
          <type>const utils::Orbitals &amp;</type>
          <declname>active_orbitals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/integrals.cpp" line="83" column="13" bodyfile="src/integrals/integrals.cpp" bodystart="83" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="integrals_8cpp_1a5076a2d53f77383ccd8249ffea325313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; linalg::Mat &gt;</type>
        <definition>std::vector&lt; linalg::Mat &gt; uw12::integrals::calculate_X3idx_two_trans_direct</definition>
        <argsstring>(const BaseIntegrals &amp;base_integrals, const utils::Orbitals &amp;occ_orbitals, const utils::Orbitals &amp;active_orbitals)</argsstring>
        <name>calculate_X3idx_two_trans_direct</name>
        <qualifiedname>uw12::integrals::calculate_X3idx_two_trans_direct</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">BaseIntegrals</ref> &amp;</type>
          <declname>base_integrals</declname>
        </param>
        <param>
          <type>const utils::Orbitals &amp;</type>
          <declname>occ_orbitals</declname>
        </param>
        <param>
          <type>const utils::Orbitals &amp;</type>
          <declname>active_orbitals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/integrals.cpp" line="111" column="13" bodyfile="src/integrals/integrals.cpp" bodystart="111" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="integrals_8cpp_1a418cab1479918f947acdb2ac34c53229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; linalg::Vec &gt;</type>
        <definition>std::vector&lt; linalg::Vec &gt; uw12::integrals::calculate_X_D_direct</definition>
        <argsstring>(const BaseIntegrals &amp;base_integrals, const utils::DensityMatrix &amp;D)</argsstring>
        <name>calculate_X_D_direct</name>
        <qualifiedname>uw12::integrals::calculate_X_D_direct</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">BaseIntegrals</ref> &amp;</type>
          <declname>base_integrals</declname>
        </param>
        <param>
          <type>const utils::DensityMatrix &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/integrals/integrals.cpp" line="144" column="13" bodyfile="src/integrals/integrals.cpp" bodystart="144" bodyend="182"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/integrals/base_integrals.cpp" line="6" column="1"/>
  </compounddef>
</doxygen>
