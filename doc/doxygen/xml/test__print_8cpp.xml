<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="test__print_8cpp" kind="file" language="C++">
    <compoundname>test_print.cpp</compoundname>
    <includes refid="print_8hpp" local="yes">../src/utils/print.hpp</includes>
    <includes refid="catch_8hpp" local="yes">catch.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="2">
        <label>../src/utils/print.hpp</label>
        <link refid="print_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>catch.hpp</label>
        <link refid="catch_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/test_print.cpp</label>
        <link refid="test__print_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>catch2/catch_all.hpp</label>
      </node>
      <node id="3">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_auto_restore_rdbuf" prot="public">AutoRestoreRdbuf</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__print_8cpp_1a5ffa0084d0dbccbe843d99036ba4bb6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string write_output_to_string</definition>
        <argsstring>(const std::function&lt; void()&gt; &amp;function, std::ostream &amp;out=std::cout)</argsstring>
        <name>write_output_to_string</name>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
<para>Function which redirects output to osstringsteam and captures it while function is called. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>The function from which output will be captured </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output method (std::cout)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The function output as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_print.cpp" line="42" column="13" bodyfile="tests/test_print.cpp" bodystart="42" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="test__print_8cpp_1a60e4b2e646719182c3b28cb6f18a234b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test print - print_character_line&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test print - print_character_line&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_print.cpp" line="52" column="1" bodyfile="tests/test_print.cpp" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="test__print_8cpp_1ab719eaabb9dcf4393be4699efdec7107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test Print - print_header&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test Print - print_header&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_print.cpp" line="59" column="1" bodyfile="tests/test_print.cpp" bodystart="59" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="test__print_8cpp_1ac7671b64527c5b83f1103007a4a9abdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test Print - print_result&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test Print - print_result&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_print.cpp" line="71" column="1" bodyfile="tests/test_print.cpp" bodystart="71" bodyend="94"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Zack<sp/>Williams<sp/>on<sp/>13/02/2024.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../src/utils/print.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;catch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">uw12::print;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_auto_restore_rdbuf" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_auto_restore_rdbuf" kindref="compound">AutoRestoreRdbuf</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>std::ostream<sp/>&amp;out;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>std::streambuf<sp/>*old;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_auto_restore_rdbuf_1a25b06c42d85d27f96f38dc953974b058" kindref="member">AutoRestoreRdbuf</ref>(std::ostream<sp/>&amp;out)<sp/>:<sp/>out{out},<sp/>old{out.rdbuf()}<sp/>{}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="class_auto_restore_rdbuf_1a25b06c42d85d27f96f38dc953974b058" kindref="member">AutoRestoreRdbuf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_auto_restore_rdbuf" kindref="compound">AutoRestoreRdbuf</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="class_auto_restore_rdbuf_1a25b06c42d85d27f96f38dc953974b058" kindref="member">AutoRestoreRdbuf</ref>(<ref refid="class_auto_restore_rdbuf" kindref="compound">AutoRestoreRdbuf</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="class_auto_restore_rdbuf_1a64f5553f041ea295fdaaa8f31216804b" kindref="member">~AutoRestoreRdbuf</ref>()<sp/>{<sp/>out.rdbuf(old);<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">std::string<sp/>write_output_to_string(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/>&amp;function,<sp/>std::ostream<sp/>&amp;out<sp/>=<sp/>std::cout</highlight></codeline>
<codeline lineno="44"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="class_auto_restore_rdbuf" kindref="compound">AutoRestoreRdbuf</ref><sp/>restore(out);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>std::cout.rdbuf(oss.rdbuf());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>function();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>print<sp/>-<sp/>print_character_line&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output<sp/>=</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write_output_to_string([]()<sp/>{<sp/>print_character_line(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>10);<sp/>});</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>CHECK(output<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;xxxxxxxxxx\n&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Check<sp/>portability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>Print<sp/>-<sp/>print_header&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>header<sp/>=</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write_output_to_string([]()<sp/>{<sp/>print_header(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>header&quot;</highlight><highlight class="normal">);<sp/>});</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::string<sp/>expected;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>expected<sp/>=<sp/>expected<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n================================================\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>This<sp/>is<sp/>a<sp/>header\n&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;================================================\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>CHECK(header<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>Print<sp/>-<sp/>print_result&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>CHECK_THROWS_WITH(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_result(</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>result,<sp/>my<sp/>result<sp/>is<sp/>very<sp/>long<sp/>it<sp/>needs<sp/>explaining&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1234567890</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>string<sp/>exceeds<sp/>size<sp/>of<sp/>print<sp/>block&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>CHECK_NOTHROW(print_result(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>result,<sp/>my<sp/>result<sp/>is<sp/>very<sp/>long<sp/>it<sp/>needs<sp/>explaining&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0.1234567890,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>64</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>write_output_to_string([]()<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>print_result(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>result&quot;</highlight><highlight class="normal">,<sp/>1.234567890);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>expected<sp/>=</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>This<sp/>is<sp/>my<sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.234568\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>CHECK(result<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/test_print.cpp"/>
  </compounddef>
</doxygen>
