<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceuw12_1_1four__el" kind="namespace" language="C++">
    <compoundname>uw12::four_el</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="four__electron_8cpp_1a8c2b67a20e06f326340e7aabdd605c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>linalg::Mat</type>
        <definition>linalg::Mat uw12::four_el::direct_fock_contribution</definition>
        <argsstring>(const linalg::Mat &amp;W3idx_one_trans, const linalg::Mat &amp;V3idx_one_trans, const linalg::Mat &amp;ttilde, const double energy_spin_factor, const size_t n_ao, const size_t n_spin)</argsstring>
        <name>direct_fock_contribution</name>
        <qualifiedname>uw12::four_el::direct_fock_contribution</qualifiedname>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>W3idx_one_trans</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>V3idx_one_trans</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>energy_spin_factor</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_ao</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron.cpp" line="11" column="13" bodyfile="src/four_electron/four_electron.cpp" bodystart="11" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="four__electron_8cpp_1a327c3836589fbcb85cba5f3896d1e8cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>linalg::Mat</type>
        <definition>linalg::Mat uw12::four_el::direct_fock_matrix</definition>
        <argsstring>(const linalg::Mat &amp;W3idx_one_trans, const linalg::Mat &amp;V3idx_one_trans, const linalg::Mat &amp;ttilde, const double energy_spin_factor, const int n_active, const int n_ao, const int n_spin)</argsstring>
        <name>direct_fock_matrix</name>
        <qualifiedname>uw12::four_el::direct_fock_matrix</qualifiedname>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>W3idx_one_trans</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>V3idx_one_trans</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>energy_spin_factor</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n_active</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n_ao</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n_spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron.cpp" line="43" column="13" bodyfile="src/four_electron/four_electron.cpp" bodystart="43" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="four__electron_8cpp_1a1896cbc991c0edc366c3ba353a5d9232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">utils::FockMatrixAndEnergy</ref></type>
        <definition>utils::FockMatrixAndEnergy uw12::four_el::direct_fock</definition>
        <argsstring>(const integrals::Integrals &amp;W, const integrals::Integrals &amp;V, const bool calculate_fock, const double scale_opp_spin, const double scale_same_spin)</argsstring>
        <name>direct_fock</name>
        <qualifiedname>uw12::four_el::direct_fock</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>calculate_fock</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scale_opp_spin</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scale_same_spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron.cpp" line="80" column="28" bodyfile="src/four_electron/four_electron.cpp" bodystart="80" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="four__electron_8cpp_1a95955721a3fe0dd8d28799f606bb2b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double uw12::four_el::indirect_energy</definition>
        <argsstring>(const linalg::Mat &amp;W4idx_four_trans, const linalg::Mat &amp;V4idx_four_trans, const size_t n_occ, const size_t n_spin)</argsstring>
        <name>indirect_energy</name>
        <qualifiedname>uw12::four_el::indirect_energy</qualifiedname>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>W4idx_four_trans</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>V4idx_four_trans</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_occ</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron.cpp" line="143" column="8" bodyfile="src/four_electron/four_electron.cpp" bodystart="143" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="four__electron_8cpp_1abb0145bdcacc3957102578cd47923677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>linalg::Mat</type>
        <definition>linalg::Mat uw12::four_el::indirect_fock_matrix</definition>
        <argsstring>(const linalg::Mat &amp;W4idx_three_trans, const linalg::Mat &amp;V4idx_three_trans, const size_t n_ao)</argsstring>
        <name>indirect_fock_matrix</name>
        <qualifiedname>uw12::four_el::indirect_fock_matrix</qualifiedname>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>W4idx_three_trans</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>V4idx_three_trans</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_ao</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron.cpp" line="181" column="13" bodyfile="src/four_electron/four_electron.cpp" bodystart="181" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="four__electron_8cpp_1aa86534ddde242476b11c164919c5ba75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">utils::FockMatrixAndEnergy</ref></type>
        <definition>utils::FockMatrixAndEnergy uw12::four_el::indirect_four_el_fock</definition>
        <argsstring>(const integrals::Integrals &amp;W, const integrals::Integrals &amp;V, const bool calculate_fock)</argsstring>
        <name>indirect_four_el_fock</name>
        <qualifiedname>uw12::four_el::indirect_four_el_fock</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>calculate_fock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron.cpp" line="253" column="28" bodyfile="src/four_electron/four_electron.cpp" bodystart="253" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="four__electron_8cpp_1ab2cd15231b81a6d7005a3a38bdc02b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">utils::FockMatrixAndEnergy</ref></type>
        <definition>utils::FockMatrixAndEnergy uw12::four_el::form_fock_four_el_df</definition>
        <argsstring>(const integrals::Integrals &amp;W, const integrals::Integrals &amp;V, bool indirect_term, bool calculate_fock, double scale_opp_spin, double scale_same_spin)</argsstring>
        <name>form_fock_four_el_df</name>
        <qualifiedname>uw12::four_el::form_fock_four_el_df</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
          <briefdescription><para><formula id="14">$w(r)$</formula> integrals </para>
</briefdescription>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
          <briefdescription><para><formula id="15">$r^{-1}$</formula> integrals </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>indirect_term</declname>
          <briefdescription><para>Whether to calculate the indirect term </para>
</briefdescription>
        </param>
        <param>
          <type>bool</type>
          <declname>calculate_fock</declname>
          <briefdescription><para>Whether to calculate the Fock matrix </para>
</briefdescription>
        </param>
        <param>
          <type>double</type>
          <declname>scale_opp_spin</declname>
          <briefdescription><para>Scale for opposite spin </para>
</briefdescription>
        </param>
        <param>
          <type>double</type>
          <declname>scale_same_spin</declname>
          <briefdescription><para>Scale for same spin </para>
</briefdescription>
        </param>
        <briefdescription>
<para>Find the contribution to the energy and Fock matrix of the four electron term of UW12. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates the four electron UW12 Fock matrix and energy using density fitting integrals.</para>
<para>In this method, the direct (+) and indirect (-) contributions are calculated separately with the energies given by  <formula id="7">\begin{align*}
E_{c, 4el,+}^{UW12} &amp;= \frac{1}{2} \sum_{ijkl} \left( ik \left|
w_{12}^{s_{ij}} \right| jl \right) \left( ki \left| r_{12}^{-1} \right| lj
\right) \newline
&amp;= \frac{1}{2} \sum_{Cik} \left( ik \left| w_{12}^{s_{ij}} \right| C \right)
\sum_{D} \left( ki \left| r_{12}^{-1} \right| D \right) \sum_{jl} \left(
\tilde{D} \left| r_{12}^{-1} \right| lj \right) \left( \tilde{C}  \left|
w_{12}^{s_{ij}} \right| jl \right) \newline
E_{c, 4 el, -}^{UW12} &amp;= \frac{1}{2} \sum_{ijkl} \left( il \left| w_{12}^{1}
\right| jk \right) \left( ki \left| r_{12}^{-1} \right| lj \right),
\end{align*}</formula> where the indirect integrals must be calculated separately using density fitting and  <formula id="8">\[
\left( \tilde{C} \left| x \right| i j \right) = \sum_{D} \left( C
\left| X \right\vert D \right)^{-1} \left(D \left| X \right| i j \right)
\]</formula> for potential <formula id="9">$X$</formula>. For the frozen-core approximation, orbital indices i and j run over active (valence) orbitals only, while k and l include the core orbitals in the summation.</para>
<para>The corresponding Fock contributions are given by  <formula id="10">\begin{align*}
\frac{\partial E_{c, 4 el, +}^{UW12}}{\partial D_{\alpha \beta}^{\sigma}}
&amp;= \sum_{C k} \left( \alpha k \left| w_{12}^{s_{ij}} \right| C \right)
\sum_{D} \left( k\beta \left| r_{12}^{-1} \right| D \right) \sum_{jl}
\left( \tilde{D} \left| r_{12}^{-1} \right| lj \right) \left( \tilde{C}
\left| w_{12}^{s_{ij}} \right| jl \right) \newline
&amp;\qquad + \sum_{C i} \left( i \beta \left| w_{12}^{s_{ij}} \right| C \right)
\sum_{D} \left( \alpha i \left| r_{12}^{-1} \right| D \right) \sum_{jl}
\left( \tilde{D} \left| r_{12}^{-1} \right| lj \right) \left( \tilde{C}
\left| w_{12}^{s_{ij}} \right| jl \right) \newline
\frac{\partial E_{c, 4 el,-}^{UW12}}{\partial D_{\alpha \beta}^{\sigma}}
&amp;= - \sum_{jkl} \delta_{\sigma_{j} \sigma} \left( \alpha l \left|
w_{12}^{1} \right| jk \right) \left( k \beta \left| r_{12}^{-1} \right|
l j\right) - \sum_{ijk} \delta_{\sigma_{j} \sigma} \left( \alpha i \left|
w_{12}^{1} \right| kj \right) \left( j \beta \left| r_{12}^{-1} \right|
ik \right)
\end{align*}</formula> where the indirect four component integral must be calculated separately. In the full-core Unsold-W12, both terms in each of these equations are equal. However, for the frozen-core approximation they are not, since the summations are now over different orbitals.</para>
<para>Since the four component integrals must be constructed separately for the indirect term, this algorithm scales as <formula id="11">$N^5$</formula>. However, the indirect term is for same spin only. Therefore, for <formula id="12">$w^{s=1}(r) = 0$</formula> (opposite spin only), this term is zero, and the algorithm is <formula id="13">$N^4$</formula>.</para>
<para><simplesect kind="return"><para>Four electron UW12 Fock matrix and energy </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron.cpp" line="296" column="28" bodyfile="src/four_electron/four_electron.cpp" bodystart="296" bodyend="312" declfile="src/four_electron/four_electron.hpp" declline="66" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="four__electron__utils_8cpp_1ac75bddd23d2ee5713791ebed3738813c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double uw12::four_el::get_energy_spin_factor</definition>
        <argsstring>(const size_t n_spin, const size_t sigma, const size_t sigmaprime, const double scale_opp_spin, const double scale_same_spin)</argsstring>
        <name>get_energy_spin_factor</name>
        <qualifiedname>uw12::four_el::get_energy_spin_factor</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n_spin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sigmaprime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale_opp_spin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale_same_spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate energy spin factor given by:  <formula id="16">\begin{align*}
f_{n_{spin} = 1} &amp;= 2 * (\kappa_0 + \kappa_1) \newline
f_{n_{spin} = 2} &amp;= \kappa_{\delta_{\sigma \sigma&apos;}}
\end{align*}</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of spin channels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Spin <formula id="17">$\sigma$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigmaprime</parametername>
</parameternamelist>
<parameterdescription>
<para>Spin <formula id="18">$\sigma&apos;$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale_opp_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Opposite-spin scale factor <formula id="19">$\kappa_0$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale_same_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Same-spin scale factor <formula id="20">$\kappa_1$</formula></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Energy spin factor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron_utils.cpp" line="9" column="8" bodyfile="src/four_electron/four_electron_utils.cpp" bodystart="9" bodyend="30" declfile="src/four_electron/four_electron_utils.hpp" declline="22" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="four__electron__utils_8cpp_1a9e52f2d69f2a4f2191032594c69276a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>utils::MatVec</type>
        <definition>utils::MatVec uw12::four_el::calculate_tab</definition>
        <argsstring>(const integrals::Integrals &amp;W, const integrals::Integrals &amp;V)</argsstring>
        <name>calculate_tab</name>
        <qualifiedname>uw12::four_el::calculate_tab</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate matrices <formula id="21">$t_{AB}^{\sigma}$</formula> given by:  <formula id="22">\[
t_{AB} = \sum_{j k} (A | w_{12} | k j) (j k | r_{12}^{-1} | B)
\]</formula> for (active) occupied orbitals <formula id="23">$j$</formula>, occupied orbitals <formula id="24">$k$</formula>, and (eigen) density-fitting indices <formula id="25">$A, B$</formula>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="4">$w_{12}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="5">$r_{12}^{-1}$</formula></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrices <formula id="21">$t_{AB}^{\sigma}$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron_utils.cpp" line="33" column="15" bodyfile="src/four_electron/four_electron_utils.cpp" bodystart="33" bodyend="49" declfile="src/four_electron/four_electron_utils.hpp" declline="41" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="four__electron__utils_8cpp_1ab134b2c55189f77e15ded9c1841269a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>utils::MatVec</type>
        <definition>utils::MatVec uw12::four_el::calculate_ttilde</definition>
        <argsstring>(const integrals::Integrals &amp;W, const integrals::Integrals &amp;V, const utils::MatVec &amp;tab)</argsstring>
        <name>calculate_ttilde</name>
        <qualifiedname>uw12::four_el::calculate_ttilde</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const utils::MatVec &amp;</type>
          <declname>tab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate matrices <formula id="26">$\tilde{t}_{AB}^{\sigma}$</formula> given by:  <formula id="27">\[
\tilde{t}_{AB} = \sum_{j k} (\tilde{A} | w_{12} | k j)
(j k | r_{12}^{-1} | \tilde{B}) = w_A t_{AB} v_{B}
\]</formula> for (active) occupied orbitals <formula id="23">$j$</formula>, occupied orbitals <formula id="24">$k$</formula>, and density-fitting indices <formula id="25">$A, B$</formula>.</para>
<para>Transformed integrals are given by:  <formula id="28">\[
(\tilde{A} | w_{12} | k j) = w_A (A | w_{12} | kj )
\]</formula> where <formula id="29">$w_A$</formula> are the density-fitting eigenvalues of <formula id="30">$(A|w_{12}|B)$</formula>, and similarly for <formula id="31">$v_B$</formula>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="4">$w_{12}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="5">$r_{12}^{-1}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tab</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="32">$\sum_{j k} (A | w_{12} | k j) (j k | r_{12}^{-1} | B)$</formula></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrices <formula id="26">$\tilde{t}_{AB}^{\sigma}$</formula> { </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron_utils.cpp" line="51" column="15" bodyfile="src/four_electron/four_electron_utils.cpp" bodystart="51" bodyend="69" declfile="src/four_electron/four_electron_utils.hpp" declline="66" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="four__electron__utils_8cpp_1a19e3c51fe43568c3826f34e4dd0fa969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>utils::MatVec</type>
        <definition>utils::MatVec uw12::four_el::calculate_ttilde</definition>
        <argsstring>(const integrals::Integrals &amp;W, const integrals::Integrals &amp;V)</argsstring>
        <name>calculate_ttilde</name>
        <qualifiedname>uw12::four_el::calculate_ttilde</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/four_electron/four_electron_utils.cpp" line="73" column="15" bodyfile="src/four_electron/four_electron_utils.cpp" bodystart="73" bodyend="79" declfile="src/four_electron/four_electron_utils.hpp" declline="72" declcolumn="15"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/four_electron/four_electron.cpp" line="8" column="1"/>
  </compounddef>
</doxygen>
