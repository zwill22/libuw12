<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="example_8cpp" kind="file" language="C++">
    <compoundname>example.cpp</compoundname>
    <includes refid="libuw12_8hpp" local="no">libuw12.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <incdepgraph>
      <node id="1">
        <label>example/example.cpp</label>
        <link refid="example_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>libuw12.hpp</label>
        <link refid="libuw12_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/integrals/base_integrals.hpp</label>
        <link refid="base__integrals_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>integral_functions.hpp</label>
        <link refid="integral__functions_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>src/three_electron/ri_utils.hpp</label>
        <link refid="ri__utils_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>utils/linalg.hpp</label>
        <link refid="linalg_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>utils/parallel.hpp</label>
        <link refid="parallel_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>src/utils/utils.hpp</label>
        <link refid="utils_8hpp_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>config.hpp</label>
      </node>
      <node id="7">
        <label>functional</label>
      </node>
      <node id="17">
        <label>iomanip</label>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="5">
        <label>mutex</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="example_8cpp_1a9e9c7019565ee800abaf5fef300b73db" prot="public" static="no">
        <name>STRING</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="8" column="9" bodyfile="example/example.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="example_8cpp_1aba13f19be1a35235db9c3e753ed12c17" prot="public" static="no">
        <name>XSTRING</name>
        <param><defname>x</defname></param>
        <initializer>STRING(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="9" column="9" bodyfile="example/example.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="example_8cpp_1afe7fbaf0a48f4345abeba4b260086726" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char uw12_root[]</definition>
        <argsstring>[]</argsstring>
        <name>uw12_root</name>
        <initializer>= XSTRING(UW12_ROOT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="10" column="16" bodyfile="example/example.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="example_8cpp_1aa069b82474761553548da6051312c490" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto epsilon</definition>
        <argsstring></argsstring>
        <name>epsilon</name>
        <initializer>= 1e-6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="17" column="16" bodyfile="example/example.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="example_8cpp_1ab57f2c9c40c881c487d2b8ddcce1b805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Object</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto get_mem_loc</definition>
        <argsstring>(const Object &amp;object)</argsstring>
        <name>get_mem_loc</name>
        <param>
          <type>const Object &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="20" column="6" bodyfile="example/example.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="example_8cpp_1aa9ef377cc98894990d753be9b609a7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">BaseIntegrals</ref></type>
        <definition>BaseIntegrals setup_base_integrals</definition>
        <argsstring>(const std::string &amp;filepath, const std::string &amp;prefix, const bool ri=true)</argsstring>
        <name>setup_base_integrals</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>ri</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="24" column="15" bodyfile="example/example.cpp" bodystart="24" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="example_8cpp_1aed70d7bca9340dc6877b38a1622cd785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref></type>
        <definition>ABSProjectors setup_abs_projectors</definition>
        <argsstring>(const std::string &amp;filepath, const size_t n_ao, const size_t n_ri)</argsstring>
        <name>setup_abs_projectors</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_ao</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_ri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="59" column="15" bodyfile="example/example.cpp" bodystart="59" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="example_8cpp_1a00ef6b180b471a1c88fb901e35f63cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Orbitals</type>
        <definition>Orbitals setup_orbitals</definition>
        <argsstring>(const std::string &amp;filepath)</argsstring>
        <name>setup_orbitals</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="77" column="10" bodyfile="example/example.cpp" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="example_8cpp_1aac1f8341b1657835f612e016308bdf61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Occupations</type>
        <definition>Occupations setup_occupations</definition>
        <argsstring>(const std::string &amp;filepath)</argsstring>
        <name>setup_occupations</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="90" column="13" bodyfile="example/example.cpp" bodystart="90" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="example_8cpp_1a5be6dd0988dcb207e512241b82d5dcfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char separator</definition>
        <argsstring>()</argsstring>
        <name>separator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="101" column="13" bodyfile="example/example.cpp" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="example/example.cpp" line="109" column="5" bodyfile="example/example.cpp" bodystart="109" bodyend="219"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;libuw12.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>filepath<sp/>to<sp/>UW12<sp/>root<sp/>directory,<sp/>script<sp/>requires<sp/>test_data<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subdirectory<sp/>of<sp/>UW12_ROOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRING(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XSTRING(x)<sp/>STRING(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>uw12_root[]<sp/>=<sp/>XSTRING(UW12_ROOT);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">uw12::integrals::BaseIntegrals</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">uw12::three_el::ri::ABSProjectors</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uw12::utils::Occupations;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uw12::utils::Orbitals;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>1e-6;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Object&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_mem_loc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Object&amp;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uw12::linalg::mem_ptr(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">BaseIntegrals</ref><sp/>setup_base_integrals(</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filepath,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>prefix,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ri<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X3_src<sp/>=<sp/>uw12::linalg::load_csv(filepath<sp/>+<sp/>prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;3.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X2_src<sp/>=<sp/>uw12::linalg::load_csv(filepath<sp/>+<sp/>prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;2.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>pointers<sp/>to<sp/>memory<sp/>locations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X3<sp/>=<sp/>get_mem_loc(X3_src);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X2<sp/>=<sp/>get_mem_loc(X2_src);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>sizes<sp/>of<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_row<sp/>=<sp/>uw12::linalg::n_rows(X3_src);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_ao<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::sqrt(8<sp/>*<sp/>n_row<sp/>-<sp/>1)<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>assert(n_ao<sp/>*<sp/>(n_ao<sp/>+<sp/>1)<sp/>/<sp/>2<sp/>==<sp/>n_row);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_df<sp/>=<sp/>uw12::linalg::n_cols(X3_src);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>assert(uw12::linalg::n_rows(X2_src)<sp/>==<sp/>n_df);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>assert(uw12::linalg::n_cols(X2_src)<sp/>==<sp/>n_df);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ri)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uw12::setup_base_integrals(X3,<sp/>X2,<sp/>n_ao,<sp/>n_df);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>RI<sp/>integrals<sp/>in<sp/>the<sp/>same<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X3_ri_src<sp/>=<sp/>uw12::linalg::load_csv(filepath<sp/>+<sp/>prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;3_ri.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X3_ri<sp/>=<sp/>get_mem_loc(X3_ri_src);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>assert(uw12::linalg::n_cols(X3_ri_src)<sp/>==<sp/>n_df);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_ri<sp/>=<sp/>uw12::linalg::n_rows(X3_ri_src)<sp/>/<sp/>n_ao;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>assert(n_ao<sp/>*<sp/>n_ri<sp/>==<sp/>uw12::linalg::n_rows(X3_ri_src));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uw12::setup_base_integrals(X3,<sp/>X2,<sp/>X3_ri,<sp/>n_ao,<sp/>n_df,<sp/>n_ri);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref><sp/>setup_abs_projectors(</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filepath,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ao,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ri</highlight></codeline>
<codeline lineno="63"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>overlap<sp/>matrix<sp/>from<sp/>external<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>S_src<sp/>=<sp/>uw12::linalg::load_csv(filepath<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;S.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>pointer<sp/>to<sp/>memory<sp/>locations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>get_mem_loc(S_src);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>assert(uw12::linalg::n_rows(S_src)<sp/>==<sp/>n_ao<sp/>+<sp/>n_ri);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert(uw12::linalg::n_cols(S_src)<sp/>==<sp/>n_ao<sp/>+<sp/>n_ri);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uw12::setup_abs_projectors(S,<sp/>n_ao,<sp/>n_ri);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restricted<sp/>orbitals<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">Orbitals<sp/>setup_orbitals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filepath)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C_src<sp/>=<sp/>uw12::linalg::load_csv(filepath<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;orbitals.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>pointer<sp/>to<sp/>memory<sp/>locations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>get_mem_loc(C_src);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_ao<sp/>=<sp/>uw12::linalg::n_rows(C_src);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_orb<sp/>=<sp/>uw12::linalg::n_cols(C_src);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uw12::setup_orbitals(C,<sp/>n_ao,<sp/>n_orb,<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restricted<sp/>orbitals<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">Occupations<sp/>setup_occupations(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filepath)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>occ_src<sp/>=<sp/>uw12::linalg::load_csv(filepath<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;occ.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>pointer<sp/>to<sp/>memory<sp/>locations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>occ<sp/>=<sp/>get_mem_loc(occ_src);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_occ<sp/>=<sp/>uw12::linalg::n_elem(occ_src);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uw12::setup_occupations(occ,<sp/>n_occ);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>separator()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::string(64,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sample<sp/>UW12<sp/>Calculation<sp/>on<sp/>water<sp/>molecule&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::string(64,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>integral<sp/>data<sp/>from<sp/>external<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sep<sp/>=<sp/>separator();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file_root<sp/>=<sp/>uw12_root;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>filepath<sp/>=<sp/>file_root<sp/>+<sp/><sp/></highlight><highlight class="stringliteral">&quot;test_data&quot;</highlight><highlight class="normal"><sp/>+<sp/>sep<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;water&quot;</highlight><highlight class="normal"><sp/>+<sp/>sep;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Location<sp/>of<sp/>external<sp/>data:<sp/>\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filepath<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>BaseIntegrals<sp/>with<sp/>these<sp/>integrals<sp/>for<sp/>each<sp/>inter-electron<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W<sp/>=<sp/>setup_base_integrals(filepath,<sp/></highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V<sp/>=<sp/>setup_base_integrals(filepath,<sp/></highlight><highlight class="stringliteral">&quot;V&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>WV<sp/>=<sp/>setup_base_integrals(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>filepath,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WV&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>);<sp/></highlight><highlight class="comment">//<sp/>No<sp/>RI<sp/>needed<sp/>for<sp/>WV<sp/>integrals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_ao<sp/>=<sp/>W.get_number_ao();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>assert(V.get_number_ao()<sp/>==<sp/>n_ao);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>assert(WV.get_number_ao()<sp/>==<sp/>n_ao);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>atomic<sp/>orbitals:\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n_ao<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_df<sp/>=<sp/>W.get_number_df();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>assert(V.get_number_df()<sp/>==<sp/>n_df);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>assert(WV.get_number_df()<sp/>==<sp/>n_df);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>density-fitting<sp/>orbitals:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n_df<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_ri<sp/>=<sp/>W.get_number_ri();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>assert(V.get_number_ri()<sp/>==<sp/>n_ri);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>auxiliary<sp/>RI<sp/>orbitals:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n_ri<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>ABS<sp/>Projectors<sp/>by<sp/>providing<sp/>overlap<sp/>matrix<sp/>S<sp/>for<sp/>the<sp/>combined<sp/>ao<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ri<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_projectors<sp/>=<sp/>setup_abs_projectors(filepath,<sp/>n_ao,<sp/>n_ri);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>orbitals<sp/>=<sp/>setup_orbitals(filepath);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>occupations<sp/>=<sp/>setup_occupations(filepath);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Specify<sp/>desired<sp/>number<sp/>of<sp/>active<sp/>orbitals<sp/>for<sp/>each<sp/>spin<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>n_active<sp/>=<sp/>{4};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_spin<sp/>=<sp/>orbitals.size();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>assert(n_spin<sp/>==<sp/>1<sp/>||<sp/>n_spin<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>assert(occupations.size()<sp/>==<sp/>n_spin);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>assert(n_active.size()<sp/>==<sp/>n_spin);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>spin<sp/>channels:<sp/>\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n_spin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>have<sp/>more<sp/>active<sp/>orbitals<sp/>than<sp/>the<sp/>number<sp/>of<sp/>occupied<sp/>orbitals<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>spin<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>0;<sp/>sigma<sp/>&lt;<sp/>n_spin;<sp/>++sigma)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(uw12::linalg::n_elem(occupations[sigma])<sp/>&gt;=<sp/>n_active[sigma]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale_opp_spin<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;osUW12<sp/>scale<sp/>factor:\t\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>scale_opp_spin<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale_same_spin<sp/>=<sp/>0.0;<sp/></highlight><highlight class="comment">//<sp/>osUW12<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ssUW12<sp/>scale<sp/>factor:\t\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>scale_same_spin<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>osUW12<sp/>energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>energy<sp/>=<sp/>uw12::uw12_energy(</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>W,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>V,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>WV,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>abs_projectors,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>orbitals,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>occupations,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>n_active,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>scale_opp_spin,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>scale_same_spin,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Calculation<sp/>complete&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::string(48,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::string(48,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;osUW12<sp/>energy:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>energy<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::string(48,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::string(64,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IF<sp/>Fock<sp/>matrix<sp/>is<sp/>also<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fock_size<sp/>=<sp/>n_ao<sp/>*<sp/>n_ao<sp/>*<sp/>n_spin;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>some<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fock[fock_size];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>energy2<sp/>=<sp/>uw12::uw12_fock(</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>fock,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>W,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>V,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>WV,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>abs_projectors,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>orbitals,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>occupations,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>n_active,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>scale_opp_spin,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>scale_same_spin</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>assert(std::abs(energy<sp/>-<sp/>energy2)<sp/>&lt;<sp/>epsilon);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="example/example.cpp"/>
  </compounddef>
</doxygen>
