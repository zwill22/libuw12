<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceuw12_1_1parallel" kind="namespace" language="C++">
    <compoundname>uw12::parallel</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="parallel_8hpp_1a79cd319419930f78b89ff039e50e896c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void uw12::parallel::parallel_for</definition>
        <argsstring>(size_t start, size_t stop, const std::function&lt; void(size_t)&gt; &amp;func, bool parallel=true)</argsstring>
        <name>parallel_for</name>
        <qualifiedname>uw12::parallel::parallel_for</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>const std::function&lt; void(size_t)&gt; &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>parallel</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run a for loop in parallel</para>
<para>Calls a function which takes an integer as argument and calls it for each integer between start and stop (exclusive).</para>
<para>Useful for looping through arrays and calculating each entry in parllel. Should not be used to manipulate the same result multiple times, such as summation. If this is required, the parallel_sum function should be used instead.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial integer value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Final integer value (exclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parallel</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to run in parallel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/parallel.hpp" line="31" column="13" bodyfile="src/utils/parallel.hpp" bodystart="31" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="parallel_8hpp_1a139a40242e6908adc6a37adf9bbf5450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType uw12::parallel::parallel_sum</definition>
        <argsstring>(const size_t start, const size_t stop, const ReturnType &amp;identity, const std::function&lt; ReturnType(size_t)&gt; &amp;func, const bool parallel=true)</argsstring>
        <name>parallel_sum</name>
        <qualifiedname>uw12::parallel::parallel_sum</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>const ReturnType &amp;</type>
          <declname>identity</declname>
        </param>
        <param>
          <type>const std::function&lt; ReturnType(size_t)&gt; &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>parallel</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct an object in parallel</para>
<para>Construct an object of type <computeroutput>ReturnType</computeroutput> in parallel for each input integer in range [start, stop).</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ReturnType</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Final value (excluded) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identity</parametername>
</parameternamelist>
<parameterdescription>
<para>Identity value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Parallel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parallel</parametername>
</parameternamelist>
<parameterdescription>
<para>Run in parallel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object of type <computeroutput>ReturnType</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/parallel.hpp" line="81" column="12" bodyfile="src/utils/parallel.hpp" bodystart="81" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="parallel_8hpp_1a8bb181f828d0fbdbf3b21b70985d19a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReturnType</type>
          </param>
        </templateparamlist>
        <type>ReturnType</type>
        <definition>ReturnType uw12::parallel::parallel_sum_2d</definition>
        <argsstring>(const size_t start1, const size_t stop1, const size_t start2, const size_t stop2, const ReturnType &amp;identity, const std::function&lt; ReturnType(size_t, size_t)&gt; &amp;func, const bool parallel=true)</argsstring>
        <name>parallel_sum_2d</name>
        <qualifiedname>uw12::parallel::parallel_sum_2d</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>start1</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>stop1</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>start2</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>stop2</declname>
        </param>
        <param>
          <type>const ReturnType &amp;</type>
          <declname>identity</declname>
        </param>
        <param>
          <type>const std::function&lt; ReturnType(size_t, size_t)&gt; &amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>parallel</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct an object in parallel over two sets of integers</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ReturnType</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start1</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value for loop 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop1</parametername>
</parameternamelist>
<parameterdescription>
<para>Final value (excluded) for loop 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start2</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value for loop 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop2</parametername>
</parameternamelist>
<parameterdescription>
<para>Final value (excluded) for loop 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identity</parametername>
</parameternamelist>
<parameterdescription>
<para>Identity value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Parallel function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parallel</parametername>
</parameternamelist>
<parameterdescription>
<para>Run in parallel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Object of type <computeroutput>ReturnType</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/parallel.hpp" line="149" column="12" bodyfile="src/utils/parallel.hpp" bodystart="149" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="parallel_8hpp_1a0a205533658c83ff94c86f77b2d604bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void uw12::parallel::isolate</definition>
        <argsstring>(Func &amp;&amp;func)</argsstring>
        <name>isolate</name>
        <qualifiedname>uw12::parallel::isolate</qualifiedname>
        <param>
          <type>Func &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to avoid deadlocks for mutex in parallel</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Func</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Parallel mutex protected code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/parallel.hpp" line="177" column="6" bodyfile="src/utils/parallel.hpp" bodystart="177" bodyend="183"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/utils/parallel.hpp" line="16" column="1"/>
  </compounddef>
</doxygen>
