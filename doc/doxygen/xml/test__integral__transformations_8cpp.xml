<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="test__integral__transformations_8cpp" kind="file" language="C++">
    <compoundname>test_integral_transformations.cpp</compoundname>
    <includes refid="catch_8hpp" local="yes">catch.hpp</includes>
    <includes refid="transformations_8hpp" local="yes">integrals/transformations.hpp</includes>
    <incdepgraph>
      <node id="4">
        <label>integrals/transformations.hpp</label>
        <link refid="transformations_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>utils/linalg.hpp</label>
        <link refid="linalg_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>utils/parallel.hpp</label>
        <link refid="parallel_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>utils/utils.hpp</label>
        <link refid="utils_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>catch.hpp</label>
        <link refid="catch_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/test_integral_transformations.cpp</label>
        <link refid="test__integral__transformations_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>catch2/catch_all.hpp</label>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>config.hpp</label>
      </node>
      <node id="11">
        <label>functional</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__integral__transformations_8cpp_1ac298768a939b38aaac0d5fb9b65bb374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test integrals - MO transformations&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test integrals - MO transformations&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_integral_transformations.cpp" line="12" column="1" bodyfile="tests/test_integral_transformations.cpp" bodystart="12" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="test__integral__transformations_8cpp_1a417008a5a7a6a572d45134e74b93af3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test integrals - MO transformations (RI)&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test integrals - MO transformations (RI)&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_integral_transformations.cpp" line="65" column="1" bodyfile="tests/test_integral_transformations.cpp" bodystart="65" bodyend="88"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Zack<sp/>Williams<sp/>on<sp/>23/02/2024.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;catch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;integrals/transformations.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">uw12;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">uw12::integrals::transformations;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">uw12_test;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>integrals<sp/>-<sp/>MO<sp/>transformations&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ao<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_df<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_orb<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J3<sp/>=<sp/>linalg::random(n_ao<sp/>*<sp/>(n_ao<sp/>+<sp/>1)<sp/>/<sp/>2,<sp/>n_df,<sp/>seed);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>linalg::random(n_ao,<sp/>n_orb,<sp/>seed);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>INFO(</highlight><highlight class="stringliteral">&quot;TEST<sp/>one<sp/>transform<sp/>first<sp/>index<sp/>full&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>REQUIRE_THROWS(mo_transform_one_index_full(linalg::head_rows(J3,<sp/>n_ao),<sp/>C));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J3_mjA<sp/>=<sp/>mo_transform_one_index_full(J3,<sp/>C);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>REQUIRE(linalg::n_rows(J3_mjA)<sp/>==<sp/>n_ao<sp/>*<sp/>n_orb);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>REQUIRE(linalg::n_cols(J3_mjA)<sp/>==<sp/>n_df);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col_idx<sp/>=<sp/>0;<sp/>col_idx<sp/>&lt;<sp/>n_df;<sp/>++col_idx)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linalg::Mat<sp/>mat1<sp/>=<sp/>linalg::reshape_col(J3_mjA,<sp/>col_idx,<sp/>n_ao,<sp/>n_orb);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linalg::Mat<sp/>mat2<sp/>=<sp/>utils::square(linalg::col(J3,<sp/>col_idx))<sp/>*<sp/>C;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(linalg::nearly_equal(mat1,<sp/>mat2,<sp/>epsilon));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>INFO(</highlight><highlight class="stringliteral">&quot;TEST<sp/>one<sp/>tranform<sp/>first<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>REQUIRE_THROWS(transform_first_index(J3,<sp/>linalg::head_rows(C,<sp/>n_orb)));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_occ<sp/>=<sp/>n_orb<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Co<sp/>=<sp/>linalg::tail_cols(C,<sp/>n_occ);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J3_ijA<sp/>=<sp/>transform_first_index(J3_mjA,<sp/>Co);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>REQUIRE(linalg::n_rows(J3_ijA)<sp/>==<sp/>n_orb<sp/>*<sp/>n_occ);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>REQUIRE(linalg::n_cols(J3_ijA)<sp/>==<sp/>n_df);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col_idx<sp/>=<sp/>0;<sp/>col_idx<sp/>&lt;<sp/>n_df;<sp/>++col_idx)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linalg::Mat<sp/>mat1<sp/>=<sp/>linalg::reshape_col(J3_ijA,<sp/>col_idx,<sp/>n_occ,<sp/>n_orb);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linalg::Mat<sp/>mat2<sp/>=<sp/>linalg::transpose(Co)<sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linalg::reshape_col(J3_mjA,<sp/>col_idx,<sp/>n_ao,<sp/>n_orb);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(linalg::nearly_equal(mat1,<sp/>mat2,<sp/>epsilon));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>INFO(</highlight><highlight class="stringliteral">&quot;Test<sp/>two<sp/>index<sp/>transform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>REQUIRE_THROWS(mo_transform_two_index_full(J3,<sp/>C,<sp/>linalg::head_rows(C,<sp/>n_orb))</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J3_ijB<sp/>=<sp/>mo_transform_two_index_full(J3,<sp/>Co,<sp/>C);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>CHECK(linalg::nearly_equal(J3_ijA,<sp/>J3_ijB,<sp/>epsilon));</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>integrals<sp/>-<sp/>MO<sp/>transformations<sp/>(RI)&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ao<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ri<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_df<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_orb<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J3_pvA<sp/>=<sp/>linalg::random(n_ri<sp/>*<sp/>n_ao,<sp/>n_df,<sp/>seed);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>linalg::random(n_ao,<sp/>n_orb,<sp/>seed);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>REQUIRE_THROWS(transform_second_index(linalg::head_rows(J3_pvA,<sp/>n_ri),<sp/>C));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>J3_piA<sp/>=<sp/>transform_second_index(J3_pvA,<sp/>C);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>REQUIRE(linalg::n_rows(J3_piA)<sp/>==<sp/>n_ri<sp/>*<sp/>n_orb);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>REQUIRE(linalg::n_cols(J3_piA)<sp/>==<sp/>n_df);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col_idx<sp/>=<sp/>0;<sp/>col_idx<sp/>&lt;<sp/>n_df;<sp/>++col_idx)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linalg::Mat<sp/>mat1<sp/>=<sp/>linalg::reshape_col(J3_piA,<sp/>col_idx,<sp/>n_ri,<sp/>n_orb);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>linalg::Mat<sp/>mat2<sp/>=</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linalg::reshape_col(J3_pvA,<sp/>col_idx,<sp/>n_ri,<sp/>n_ao)<sp/>*<sp/>C;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK(linalg::nearly_equal(mat1,<sp/>mat2,<sp/>epsilon));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/test_integral_transformations.cpp"/>
  </compounddef>
</doxygen>
