<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceuw12__test_1_1fock" kind="namespace" language="C++">
    <compoundname>uw12_test::fock</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="numerical__fock_8hpp_1ad662baa7ed5f8ca6dbeb512c15b2e07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnergyFn</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto uw12_test::fock::numerical_gradient</definition>
        <argsstring>(const uw12::linalg::Vec &amp;vec, const EnergyFn &amp;energy_fn, const double delta)</argsstring>
        <name>numerical_gradient</name>
        <qualifiedname>uw12_test::fock::numerical_gradient</qualifiedname>
        <param>
          <type>const uw12::linalg::Vec &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const EnergyFn &amp;</type>
          <declname>energy_fn</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function which calculates the numerical gradient with respect to vector vec for an energy function fn</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EnergyFn</parametername>
</parameternamelist>
<parameterdescription>
<para>A function of type f(vec) -&gt; double </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>energy_fn</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gradient in vector form </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/numerical_fock.hpp" line="23" column="6" bodyfile="tests/numerical_fock.hpp" bodystart="23" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="numerical__fock_8hpp_1a226728e013f038c21b9d8f6a2284e319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EnergyFn</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto uw12_test::fock::numerical_fock_matrix</definition>
        <argsstring>(const EnergyFn &amp;energy_function, const uw12::utils::DensityMatrix &amp;D_mat, const double delta)</argsstring>
        <name>numerical_fock_matrix</name>
        <qualifiedname>uw12_test::fock::numerical_fock_matrix</qualifiedname>
        <param>
          <type>const EnergyFn &amp;</type>
          <declname>energy_function</declname>
        </param>
        <param>
          <type>const uw12::utils::DensityMatrix &amp;</type>
          <declname>D_mat</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the Fock matrix numerically using the energy</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>EnergyFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function f(vec) -&gt; double </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>energy_function</parametername>
</parameternamelist>
<parameterdescription>
<para>E(D) -&gt; energy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D_mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Density matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>variation parameter</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fock matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/numerical_fock.hpp" line="64" column="6" bodyfile="tests/numerical_fock.hpp" bodystart="64" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="numerical__fock_8hpp_1acdc92de52d3a1ff81bc3dbdad671cfc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void uw12_test::fock::check_fock</definition>
        <argsstring>(const uw12::utils::FockMatrix &amp;analytic_fock, const uw12::utils::FockMatrix &amp;num_fock, const double rel_eps)</argsstring>
        <name>check_fock</name>
        <qualifiedname>uw12_test::fock::check_fock</qualifiedname>
        <param>
          <type>const uw12::utils::FockMatrix &amp;</type>
          <declname>analytic_fock</declname>
        </param>
        <param>
          <type>const uw12::utils::FockMatrix &amp;</type>
          <declname>num_fock</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rel_eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/numerical_fock.hpp" line="97" column="13" bodyfile="tests/numerical_fock.hpp" bodystart="97" bodyend="141"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="tests/numerical_fock.hpp" line="11" column="1"/>
  </compounddef>
</doxygen>
