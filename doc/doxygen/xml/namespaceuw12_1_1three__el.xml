<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceuw12_1_1three__el" kind="namespace" language="C++">
    <compoundname>uw12::three_el</compoundname>
    <innernamespace refid="namespaceuw12_1_1three__el_1_1ri">uw12::three_el::ri</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="indirect__utils_8cpp_1a875c2ed04d59ea864216cbfe55fc2b43" prot="public" static="no" mutable="no">
        <type>std::function&lt; Vec(const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;, const Vec &amp;)</type>
        <definition>std::function&lt; Vec(const Integrals &amp;, const Vec &amp;) uw12::three_el::get_X3_func) (const Integrals &amp;X_int)</definition>
        <argsstring>)(const Integrals &amp;X_int)</argsstring>
        <name>get_X3_func</name>
        <qualifiedname>uw12::three_el::get_X3_func</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/indirect_utils.cpp" line="261" column="15" bodyfile="src/three_electron/indirect_utils.cpp" bodystart="261" bodyend="277"/>
      </memberdef>
      <memberdef kind="variable" id="indirect__utils_8cpp_1a5b1ceb7213d94679a868ec0073ab88e7" prot="public" static="no" mutable="no">
        <type>std::function&lt; Vec(const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;, const Vec &amp;)</type>
        <definition>std::function&lt; Vec(const Integrals &amp;, const Vec &amp;) uw12::three_el::get_X3_ri_fn) (const Integrals &amp;X_int)</definition>
        <argsstring>)(const Integrals &amp;X_int)</argsstring>
        <name>get_X3_ri_fn</name>
        <qualifiedname>uw12::three_el::get_X3_ri_fn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/indirect_utils.cpp" line="279" column="15" bodyfile="src/three_electron/indirect_utils.cpp" bodystart="279" bodyend="295"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="direct__utils_8cpp_1a3c037c1ab2e2e8ee5df8ebe2d492c369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::three_el::calculate_xab_component</definition>
        <argsstring>(const Mat &amp;W, const Mat &amp;V, const Mat &amp;projector)</argsstring>
        <name>calculate_xab_component</name>
        <qualifiedname>uw12::three_el::calculate_xab_component</qualifiedname>
        <param>
          <type>const Mat &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>projector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="31" column="6" bodyfile="src/three_electron/direct_utils.cpp" bodystart="31" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1a047ddc6c335b993cf7fb83302e9ddcc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>utils::MatVec</type>
        <definition>utils::MatVec uw12::three_el::calculate_xab</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors)</argsstring>
        <name>calculate_xab</name>
        <qualifiedname>uw12::three_el::calculate_xab</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ri::ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate matrices <formula id="68">$X_{AB}^{\sigma}$</formula> given by:  <formula id="69">\[
X_{AB} = \sum_{j \mu&apos;} (A | w_{12} | j \mu&apos;)
\sum_{\nu&apos;} [ S^{-1} ]_{\mu&apos; \nu&apos;} (\nu&apos; j | r_{12}^{-1} | B)
\]</formula> for (active) occupied orbitals <formula id="23">$j$</formula>, ri orbitals <formula id="70">$\mu&apos;, \nu&apos;$</formula>, and density-fitting indices <formula id="25">$A, B$</formula>. The ri indices run over the ao and auxilliary ri basis sets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="4">$w_{12}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="5">$r_{12}^{-1}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abs_projectors</parametername>
</parameternamelist>
<parameterdescription>
<para>RI projectors <formula id="71">$S^{-1}$</formula></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrices <formula id="68">$X_{AB}^{\sigma}$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="62" column="15" bodyfile="src/three_electron/direct_utils.cpp" bodystart="62" bodyend="133" declfile="src/three_electron/direct_utils.hpp" declline="28" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1a4ac97468b879a96a4c17b530cb0cf458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double uw12::three_el::calculate_direct_energy</definition>
        <argsstring>(const utils::MatVec &amp;x, const utils::MatVec &amp;ttilde, double scale_opp_spin, double scale_same_spin)</argsstring>
        <name>calculate_direct_energy</name>
        <qualifiedname>uw12::three_el::calculate_direct_energy</qualifiedname>
        <param>
          <type>const utils::MatVec &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const utils::MatVec &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale_opp_spin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale_same_spin</declname>
        </param>
        <briefdescription>
<para>Calculates the direct three-el energy. </para>
        </briefdescription>
        <detaileddescription>
<para>Direct three-el energy is given by:  <formula id="72">\[
E_c^{3el, +} = \sum_{\sigma} \sum_{AB} X_{AB}^{\sigma}
\tilde{t}_{AB}^{\sigma} \]</formula> for matrices <formula id="68">$X_{AB}^{\sigma}$</formula> and <formula id="26">$\tilde{t}_{AB}^{\sigma}$</formula>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrices <formula id="68">$X_{AB}^{\sigma}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttilde</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrices <formula id="26">$\tilde{t}_{AB}^{\sigma}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale_opp_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Opposite-spin scale factor <formula id="19">$\kappa_0$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale_same_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Same-spin scale factor <formula id="20">$\kappa_1$</formula></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Direct three-el energy </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="136" column="8" bodyfile="src/three_electron/direct_utils.cpp" bodystart="136" bodyend="157" declfile="src/three_electron/direct_utils.hpp" declline="48" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1a3213fa17babecf7c71f3c66e5ee31ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_xab_dttilde</definition>
        <argsstring>(const Mat &amp;W3idx_one_trans, const Mat &amp;V3idx_one_trans, const Mat &amp;xab, const Vec &amp;W_vals, const Vec &amp;V_vals, const size_t n_active, const size_t n_ao)</argsstring>
        <name>calculate_xab_dttilde</name>
        <qualifiedname>uw12::three_el::calculate_xab_dttilde</qualifiedname>
        <param>
          <type>const Mat &amp;</type>
          <declname>W3idx_one_trans</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>V3idx_one_trans</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>xab</declname>
        </param>
        <param>
          <type>const Vec &amp;</type>
          <declname>W_vals</declname>
        </param>
        <param>
          <type>const Vec &amp;</type>
          <declname>V_vals</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_active</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_ao</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="164" column="5" bodyfile="src/three_electron/direct_utils.cpp" bodystart="164" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1a0cdbe21fe050de1946582bb5d598ba33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; Vec(size_t)&gt;</type>
        <definition>std::function&lt; Vec(size_t)&gt; uw12::three_el::get_X3_fn</definition>
        <argsstring>(const Integrals &amp;X_int)</argsstring>
        <name>get_X3_fn</name>
        <qualifiedname>uw12::three_el::get_X3_fn</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>X_int</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="206" column="15" bodyfile="src/three_electron/direct_utils.cpp" bodystart="206" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1aa1932db95a857d813a387d912a472b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; Mat(size_t)&gt;</type>
        <definition>std::function&lt; Mat(size_t)&gt; uw12::three_el::get_W3_ri_fn</definition>
        <argsstring>(const Integrals &amp;V_int, const size_t n_ao, const size_t n_ri)</argsstring>
        <name>get_W3_ri_fn</name>
        <qualifiedname>uw12::three_el::get_W3_ri_fn</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V_int</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_ao</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_ri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="221" column="15" bodyfile="src/three_electron/direct_utils.cpp" bodystart="221" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1abec93d9deead516468525f7f4703186e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_s_matrix</definition>
        <argsstring>(const Integrals &amp;V_int, const Mat &amp;t_tilde)</argsstring>
        <name>calculate_s_matrix</name>
        <qualifiedname>uw12::three_el::calculate_s_matrix</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V_int</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>t_tilde</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="242" column="5" bodyfile="src/three_electron/direct_utils.cpp" bodystart="242" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1a150402e3b26ba24440892d3df9eb3933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_ttilde_dxab_s_term</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const Mat &amp;ttilde, const ABSProjectors &amp;abs_projectors)</argsstring>
        <name>calculate_ttilde_dxab_s_term</name>
        <qualifiedname>uw12::three_el::calculate_ttilde_dxab_s_term</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="256" column="5" bodyfile="src/three_electron/direct_utils.cpp" bodystart="256" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1a890470b56e3281b758600e6d8ac3fc66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_p_matrix</definition>
        <argsstring>(const Integrals &amp;V_int, const Mat &amp;t_tilde)</argsstring>
        <name>calculate_p_matrix</name>
        <qualifiedname>uw12::three_el::calculate_p_matrix</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V_int</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>t_tilde</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="288" column="5" bodyfile="src/three_electron/direct_utils.cpp" bodystart="288" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1ab5ad1e366f7547457ce6586f9d090bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_ttilde_dxab_p_term</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const Mat &amp;ttilde, const ABSProjectors &amp;abs_projectors)</argsstring>
        <name>calculate_ttilde_dxab_p_term</name>
        <qualifiedname>uw12::three_el::calculate_ttilde_dxab_p_term</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="302" column="5" bodyfile="src/three_electron/direct_utils.cpp" bodystart="302" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1a2aaab572749baee0e4b19b4e27b31e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_ttilde_dxab_incore</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const Mat &amp;ttilde, const ABSProjectors &amp;abs_projectors)</argsstring>
        <name>calculate_ttilde_dxab_incore</name>
        <qualifiedname>uw12::three_el::calculate_ttilde_dxab_incore</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="336" column="5" bodyfile="src/three_electron/direct_utils.cpp" bodystart="336" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1a646a695f4f2dd97b1070103303274a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_ttilde_dxab_direct</definition>
        <argsstring>(const Integrals &amp;W_int, const Integrals &amp;V_int, const Mat &amp;t_tilde, const ABSProjectors &amp;abs_projectors)</argsstring>
        <name>calculate_ttilde_dxab_direct</name>
        <qualifiedname>uw12::three_el::calculate_ttilde_dxab_direct</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W_int</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V_int</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>t_tilde</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="349" column="5" bodyfile="src/three_electron/direct_utils.cpp" bodystart="349" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8cpp_1ace5e004e5ba00a5ab503754d2c055e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_ttilde_dxab</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const Mat &amp;ttilde, const ABSProjectors &amp;abs_projectors)</argsstring>
        <name>calculate_ttilde_dxab</name>
        <qualifiedname>uw12::three_el::calculate_ttilde_dxab</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const Mat &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.cpp" line="438" column="5" bodyfile="src/three_electron/direct_utils.cpp" bodystart="438" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8hpp_1a7ad2bc79e9d0a90d6f6d4956d8beaaac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>linalg::Mat</type>
        <definition>linalg::Mat uw12::three_el::calculate_xab_dttilde</definition>
        <argsstring>(const linalg::Mat &amp;W3idx_one_trans, const linalg::Mat &amp;V3idx_one_trans, const linalg::Mat &amp;xab, const linalg::Vec &amp;W_vals, const linalg::Vec &amp;V_vals, size_t n_active, size_t n_ao)</argsstring>
        <name>calculate_xab_dttilde</name>
        <qualifiedname>uw12::three_el::calculate_xab_dttilde</qualifiedname>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>W3idx_one_trans</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>V3idx_one_trans</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>xab</declname>
        </param>
        <param>
          <type>const linalg::Vec &amp;</type>
          <declname>W_vals</declname>
        </param>
        <param>
          <type>const linalg::Vec &amp;</type>
          <declname>V_vals</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_active</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_ao</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fock contribution from the derivative of <formula id="26">$\tilde{t}_{AB}^{\sigma}$</formula></para>
<para>Calculates the direct three-electron fock contribution corresponding to the derivative of <formula id="26">$\tilde{t}_{AB}^{\sigma}$</formula> with matrix <formula id="73">$X_{AB}^{\sigma&apos;}$</formula>, given by:  <formula id="74">\[
F_{\alpha\beta}^{\sigma\sigma&apos;} = \sum_{AB} X_{AB}^{\sigma&apos;}
\frac{d \tilde{t}_{AB}^{\sigma}}{d D_{\alpha_\beta}}
\]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W3idx_one_trans</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals <formula id="75">$(j \rho | w_{12} |A)$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V3idx_one_trans</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals <formula id="76">$(j \rho | r_{12}^{-1} |A)$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xab</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix <formula id="73">$X_{AB}^{\sigma&apos;}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W_vals</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of df eigenvalues for <formula id="77">$(A| w_{12} |B)$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V_vals</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of df eigenvalues for <formula id="78">$(A| r_{12}^{-1} |B)$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_active</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of active orbitals </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_ao</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of atomic orbital basis functions</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fock matrix contribution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.hpp" line="74" column="13" declfile="src/three_electron/direct_utils.hpp" declline="74" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="direct__utils_8hpp_1a6e864a92776a312695b0578e9225aa16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>linalg::Mat</type>
        <definition>linalg::Mat uw12::three_el::calculate_ttilde_dxab</definition>
        <argsstring>(const integrals::Integrals &amp;W, const integrals::Integrals &amp;V, const linalg::Mat &amp;ttilde, const ri::ABSProjectors &amp;abs_projectors)</argsstring>
        <name>calculate_ttilde_dxab</name>
        <qualifiedname>uw12::three_el::calculate_ttilde_dxab</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ri::ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fock contribution from the derivative of <formula id="68">$X_{AB}^{\sigma}$</formula></para>
<para>Calculates the direct three-electron fock contribution corresponding to the derivative of <formula id="68">$X_{AB}^{\sigma}$</formula> with matrix <formula id="26">$\tilde{t}_{AB}^{\sigma}$</formula>, given by:  <formula id="79">\[
F_{\alpha\beta}^{\sigma\sigma&apos;} = \sum_{AB} \tilde{t}_{AB}^{\sigma&apos;}
\frac{d X_{AB}^{\sigma}}{d D_{\alpha_\beta}}
\]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="4">$w_{12}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="5">$r_{12}^{-1}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ttilde</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix <formula id="80">$\tilde{t}_{AB}^{\sigma&apos;}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abs_projectors</parametername>
</parameternamelist>
<parameterdescription>
<para>RI projectors <formula id="71">$S^{-1}$</formula></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fock matrix contribution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/direct_utils.hpp" line="100" column="13" declfile="src/three_electron/direct_utils.hpp" declline="100" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="indirect__utils_8cpp_1a288b22961323f2e98f6853921d9935ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_xij</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors, const size_t n_core, const size_t i, const size_t j, const size_t sigma)</argsstring>
        <name>calculate_xij</name>
        <qualifiedname>uw12::three_el::calculate_xij</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_core</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/indirect_utils.cpp" line="19" column="5" bodyfile="src/three_electron/indirect_utils.cpp" bodystart="19" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="indirect__utils_8cpp_1addde79248b1db48606a8fbc632365d5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::calculate_ttilde_ij</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const size_t n_active, const size_t i, const size_t j, const size_t sigma)</argsstring>
        <name>calculate_ttilde_ij</name>
        <qualifiedname>uw12::three_el::calculate_ttilde_ij</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n_active</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/indirect_utils.cpp" line="67" column="5" bodyfile="src/three_electron/indirect_utils.cpp" bodystart="67" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="indirect__utils_8cpp_1a1bf10574cb7fe8017e6be5b48c9c645f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double uw12::three_el::indirect_3el_energy</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors)</argsstring>
        <name>indirect_3el_energy</name>
        <qualifiedname>uw12::three_el::indirect_3el_energy</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ri::ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the indirect three electron energy</para>
<para>The indirect three electron energy is calculated using ABS+RI as:  <formula id="81">\[
E_c^{3el, -} = \sum_{ij} Y_{ij}
= \sum_{ij} \left( \sum_{AB} \tilde{t}_{AB}^{ij} X_{AB}^{ij} \right)
\]</formula> for (active) occupied indices <formula id="82">$i,j$</formula>, and density-fitting indices <formula id="83">$A,B$</formula>, and where  <formula id="84">\[
\tilde{t}_{AB}^{ij} = \sum_k (\tilde{A}| w_{12} | jk)
(ki |r_{12}^{-1}|\tilde{B})
\]</formula> for (complete) occupied indices <formula id="24">$k$</formula>, and  <formula id="85">\[
X_{AB}^{ij} = \sum_{\mu&apos;\nu&apos;} (A| w_{12}| i\mu&apos;) [S^{-1}]_{\mu&apos;\nu&apos;}
(\nu&apos;j| r_{12}^{-1} |B)
\]</formula> with ri indices <formula id="86">$\mu&apos;\nu&apos;$</formula> over the complete ao+ri space.</para>
<para>Calculation of the energy is parallelised over indices <formula id="87">$i, j$</formula>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="4">$w_{12}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="5">$r_{12}^{-1}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abs_projectors</parametername>
</parameternamelist>
<parameterdescription>
<para>RI projectors <formula id="71">$S^{-1}$</formula></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Indirect three-electron energy </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/indirect_utils.cpp" line="101" column="8" bodyfile="src/three_electron/indirect_utils.cpp" bodystart="101" bodyend="133" declfile="src/three_electron/indirect_utils.hpp" declline="39" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="indirect__utils_8cpp_1a2cac3ce7bfd700778d9b7535f9ec6365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X3Fn</type>
          </param>
        </templateparamlist>
        <type>Mat</type>
        <definition>Mat uw12::three_el::fock_i</definition>
        <argsstring>(const Integrals &amp;X, const Integrals &amp;Y, const ABSProjectors &amp;abs_projectors, const X3Fn &amp;X3_fn, const X3Fn &amp;X3_ri_fn, const size_t j, const size_t k, const size_t sigma)</argsstring>
        <name>fock_i</name>
        <qualifiedname>uw12::three_el::fock_i</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <param>
          <type>const X3Fn &amp;</type>
          <declname>X3_fn</declname>
        </param>
        <param>
          <type>const X3Fn &amp;</type>
          <declname>X3_ri_fn</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/indirect_utils.cpp" line="139" column="5" bodyfile="src/three_electron/indirect_utils.cpp" bodystart="139" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="indirect__utils_8cpp_1a4d6011083eb7a02f32118a90d24979ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>Mat uw12::three_el::fock_k</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors, const size_t i, const size_t j, const size_t sigma)</argsstring>
        <name>fock_k</name>
        <qualifiedname>uw12::three_el::fock_k</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/indirect_utils.cpp" line="199" column="5" bodyfile="src/three_electron/indirect_utils.cpp" bodystart="199" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="indirect__utils_8cpp_1a1098d91e3de61caf0b1ffa6cbf660c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Mat</type>
        <definition>linalg::Mat uw12::three_el::indirect_3el_fock_matrix</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors, const size_t sigma)</argsstring>
        <name>indirect_3el_fock_matrix</name>
        <qualifiedname>uw12::three_el::indirect_3el_fock_matrix</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ri::ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the indirect fock matrix contribution</para>
<para>The indirect fock matrix contribution  <formula id="88">\[
F_{\alpha\beta}^{\sigma} = \frac{d E_c^{3el,-}}{d D_{\alpha\beta}^{\sigma}}
\]</formula> has three contributions from the three occupied orbital indices <formula id="89">$i,j,k$</formula>. These are given by:  <formula id="90">\begin{align*}
f_{\alpha\beta}^{\sigma} (i) = \sum_{jk} \sum_{\mu&apos;\nu&apos;}
(jk|w_{12}|\alpha \mu&apos;) [S^{-1}]_{\mu&apos;\nu&apos;} (\nu&apos; j| r_{12}^{-1}|k\beta)
\newline
f_{\alpha\beta}^{\sigma} (j) = \sum_{ik} \sum_{\mu&apos;\nu&apos;}
(\alpha k|w_{12}|i \mu&apos;) [S^{-1}]_{\mu&apos;\nu&apos;} (\nu&apos; \beta| r_{12}^{-1}|ki)
\newline
f_{\alpha\beta}^{\sigma} (k) = \sum_{ij} \sum_{\mu&apos;\nu&apos;}
(j\beta|w_{12}|i \mu&apos;) [S^{-1}]_{\mu&apos;\nu&apos;} (\nu&apos; j| r_{12}^{-1}|\alpha i)
\end{align*}</formula> Contributions are parallelised over the occupied indices.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="4">$w_{12}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="5">$r_{12}^{-1}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abs_projectors</parametername>
</parameternamelist>
<parameterdescription>
<para>RI projectors <formula id="71">$S^{-1}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sigma</parametername>
</parameternamelist>
<parameterdescription>
<para>Spin index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Unsymmetrised indirect fock contribution for single spin channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/indirect_utils.cpp" line="297" column="5" bodyfile="src/three_electron/indirect_utils.cpp" bodystart="297" bodyend="345" declfile="src/three_electron/indirect_utils.hpp" declline="71" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="three__electron_8cpp_1acbfef5f01bb718abdb20b91ef8480f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>utils::FockMatrix</type>
        <definition>utils::FockMatrix uw12::three_el::calculate_direct_fock_matrix</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const utils::MatVec &amp;x, const utils::MatVec &amp;ttilde, const ABSProjectors &amp;abs_projectors, const double scale_opp_spin, const double scale_same_spin)</argsstring>
        <name>calculate_direct_fock_matrix</name>
        <qualifiedname>uw12::three_el::calculate_direct_fock_matrix</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const utils::MatVec &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const utils::MatVec &amp;</type>
          <declname>ttilde</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scale_opp_spin</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scale_same_spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/three_electron.cpp" line="32" column="19" bodyfile="src/three_electron/three_electron.cpp" bodystart="32" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="three__electron_8cpp_1ab82b575e8dd4f089d5b92b726f7f882a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::three_el::direct_fock</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors, const bool calculate_fock, const double scale_opp_spin, const double scale_same_spin)</argsstring>
        <name>direct_fock</name>
        <qualifiedname>uw12::three_el::direct_fock</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>calculate_fock</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scale_opp_spin</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>scale_same_spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/three_electron.cpp" line="86" column="6" bodyfile="src/three_electron/three_electron.cpp" bodystart="86" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="three__electron_8cpp_1afe6186e479769a2b4b674cc625a21813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::three_el::calculate_indirect_fock</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors)</argsstring>
        <name>calculate_indirect_fock</name>
        <qualifiedname>uw12::three_el::calculate_indirect_fock</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/three_electron.cpp" line="125" column="6" bodyfile="src/three_electron/three_electron.cpp" bodystart="125" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="three__electron_8cpp_1a0738e51907a00e572f2b25ef52af0ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::three_el::indirect_fock</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors, const bool calculate_fock)</argsstring>
        <name>indirect_fock</name>
        <qualifiedname>uw12::three_el::indirect_fock</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>calculate_fock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/three_electron.cpp" line="143" column="6" bodyfile="src/three_electron/three_electron.cpp" bodystart="143" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="three__electron_8cpp_1a87a4d58ec43c2d8c1ef974abfea3f61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">utils::FockMatrixAndEnergy</ref></type>
        <definition>utils::FockMatrixAndEnergy uw12::three_el::form_fock_three_el_term_df_ri</definition>
        <argsstring>(const Integrals &amp;W, const Integrals &amp;V, const ABSProjectors &amp;abs_projectors, const bool indirect_term, const bool calculate_fock, const double scale_opp_spin, const double scale_same_spin)</argsstring>
        <name>form_fock_three_el_term_df_ri</name>
        <qualifiedname>uw12::three_el::form_fock_three_el_term_df_ri</qualifiedname>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">integrals::Integrals</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1three__el_1_1ri_1_1_a_b_s_projectors" kindref="compound">ri::ABSProjectors</ref> &amp;</type>
          <declname>abs_projectors</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>indirect_term</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>calculate_fock</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale_opp_spin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale_same_spin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the UW12 three electron energy and Fock matrix contribution using a density-fitted RI approximation</para>
<para>This algorithm calculates the UW12 three-electron energy given by:  <formula id="98">\[
E_{c, 3el}^{UW12} = - \left\langle \overline{ij} k \left\vert
w^{s_{ij}}_{12} r_{23}^{-1}\right\vert k j i \right\rangle
\]</formula> (repeated index summation)</para>
<para>Using the RI approximation, these integrals may be approximated as  <formula id="99">\[
E_{c, 3el}^{UW12, RI} = - \left\langle \overline{ij} \left\vert
w^{s_{ij}}_{12} \right\vert k q \right\rangle
\left\langle k q \left\vert r_{12}^{-1} \right\vert ij \right\rangle,
\]</formula> using the resolution of the identity <formula id="100">$| q &gt;&lt;q | \approx 1$</formula>.</para>
<sect3 id="three__electron_8cpp_1autotoc_md7">
<title>Resolution of the identity</title><para>To construct the resolution of the identity, an ABS+ approach is used: <ulink url="https://doi.org/10.1016/j.cplett.2004.07.061">https://doi.org/10.1016/j.cplett.2004.07.061</ulink> In this approach, the orthonormal basis q is constructed from the union of the ao basis and an auxiliary basis set (ABS) <computeroutput>ri</computeroutput>. This basis is not constructed explicitly but calculated using the inverse overlap for the combined ao and ri space. The projector may be written as  <formula id="101">$|q \rangle \langle q | = |\tilde{\mu} \rangle
[S^{-1}]_{\tilde{\mu}\tilde{\nu}} \langle \tilde{\nu} |$</formula> for indices <formula id="102">$\tilde{\mu},\tilde{\nu}$</formula> in the union of the two basis sets. After computing the inverse of <formula id="103">$S$</formula> for the full union using singular value decomposition to remove linearly dependent functions, the inverse may be split into four sub-matrices for each possible component basis combination: <formula id="104">\[ | q \rangle \langle q | = | \mu \rangle
[S^{-1}]_{\mu\nu} \langle \nu |
+ | \rho \rangle [S^{-1}]_{\rho\nu} \langle \nu |
+ | \mu \rangle [S^{-1}]_{\mu \sigma} \langle \sigma |
+ | \rho \rangle [S^{-1}]_{\rho\sigma} \langle \sigma |
\]</formula> for <formula id="54">$\mu, \nu$</formula> in <computeroutput>ri</computeroutput> and <formula id="105">$\rho, \sigma$</formula> in <computeroutput>ao</computeroutput>. The projectors <formula id="71">$S^{-1}$</formula> are taken from <computeroutput>abs_projectors</computeroutput>.</para>
<para>In order to evaluate the integrals efficiently, a density-fitting approach is used to approximate the two-electron integrals. Therefore only three-index objects must be stored.</para>
</sect3>
<sect3 id="three__electron_8cpp_1autotoc_md8">
<title>Direct Energy</title><para>The direct energy is then given by:  <formula id="106">\[
E_{c, 3el, +}^{UW12} = - X_{AB} \tilde{t}_{AB}
\]</formula> for density fitting basis indices <formula id="83">$A,B$</formula>, where:  <formula id="107">\begin{align*}
X_{AB} &amp;= (A|w_{12}|j \mu) [S^{-1}]_{\mu\nu} (\nu j| r_{12}^{-1} |B)
+ (A|w_{12}|j \rho) [S^{-1}]_{\rho\nu} (\nu j| r_{12}^{-1} |B) \newline
&amp;+ (A|w_{12}|j \mu) [S^{-1}]_{\mu\sigma} (\sigma j| r_{12}^{-1} |B)
+ (A|w_{12}|j \rho) [S^{-1}]_{\rho\sigma} (\sigma j| r_{12}^{-1} |B)
\end{align*}</formula> for active (occupied) orbitals <computeroutput>j</computeroutput>. Similarly:  <formula id="108">\[
\tilde{t}_{AB} = (\tilde{A} | w_{12} | ik ) ( ki | r_{12}^{-1} | \tilde{B})
\]</formula> for active occupied orbitals <computeroutput>i</computeroutput> and all occupied orbitals <computeroutput>k</computeroutput> with <formula id="109">$(\tilde{A} | w_{12} | ik ) = (A|w_{12}|B)^{-1} (B|w_{12}|ik)$</formula>. Three-index integrals <formula id="110">$(A|x_{12}|j\rho)$</formula> and <formula id="111">$(A|x_{12}|ik)$</formula> are the one and two mo-transformed integrals respectively, while the three-index mo-transformed <computeroutput>ri</computeroutput> integrals are <formula id="112">$(A|w_{12}|j \mu)$</formula>.</para>
</sect3>
<sect3 id="three__electron_8cpp_1autotoc_md9">
<title>Direct Fock</title><para>The direct fock matrix contribution is calculated from:  <formula id="113">\[
\frac{\partial E_{c, 3el,+}^{UW12}}{\partial D_{\alpha \beta}^{\sigma}} =
\frac{\partial X_{AB}}{\partial D_{\alpha \beta}^{\sigma}} \tilde{t}_{AB}
+ X_{AB} \frac{\partial \tilde{t}_{AB}}{\partial D_{\alpha \beta}^{\sigma}}
\]</formula> where  <formula id="114">\begin{align*}
\frac{\partial X_{AB}}{\partial D_{\alpha \beta}^{\sigma}} &amp;=
(A|w_{12}|\alpha \mu) [S^{-1}]_{\mu\nu} (\nu \beta| r_{12}^{-1} |B)
+ (A|w_{12}|\alpha \rho) [S^{-1}]_{\rho\nu} (\nu \beta| r_{12}^{-1} |B)
\newline
&amp;+ (A|w_{12}|\alpha \mu) [S^{-1}]_{\mu\sigma} (\sigma \beta| r_{12}^{-1} |B)
+ (A|w_{12}|\alpha \rho) [S^{-1}]_{\rho\sigma} (\sigma \beta| r_{12}^{-1}
|B) \end{align*}</formula> and <formula id="115">\[ \frac{\partial \tilde{t}_{AB}}{\partial D_{\alpha
\beta}^{\sigma}} =
(\tilde{A} | w_{12} | \alpha k ) ( k \beta | r_{12}^{-1} | \tilde{B})
+  (\tilde{A} | w_{12} | i \beta ) ( \alpha i | r_{12}^{-1} | \tilde{B})
\]</formula></para>
</sect3>
<sect3 id="three__electron_8cpp_1autotoc_md10">
<title>Indirect Energy</title><para>The indirect energy is given by:  <formula id="116">\[
E_{c, 3el, -}^{UW12} = - \sum_{ij} \sum_{AB} X_{AB}^{ij} \tilde{t}_{AB}^{ij}
\]</formula> for density fitting basis indices <formula id="83">$A,B$</formula>, where:  <formula id="117">\begin{align*}
X_{AB}^{ij} &amp;= \sum_{\mu \nu}
(A|w_{12}|i \mu) [S^{-1}]_{\mu\nu} (\nu j| r_{12}^{-1} |B)
+ (A|w_{12}|i \rho) [S^{-1}]_{\rho\nu} (\nu j| r_{12}^{-1} |B) \newline
&amp;+ (A|w_{12}|i \mu) [S^{-1}]_{\mu\sigma} (\sigma j| r_{12}^{-1} |B)
+ (A|w_{12}|i \rho) [S^{-1}]_{\rho\sigma} (\sigma j| r_{12}^{-1} |B)
\end{align*}</formula>  <formula id="118">\[
\tilde{t}_{AB}^{ij} = \sum_{k} (\tilde{A} | w_{12} | jk )
( ki | r_{12}^{-1} | \tilde{B})
\]</formula> This operation is performed using parallelisation over indices i,j.</para>
</sect3>
<sect3 id="three__electron_8cpp_1autotoc_md11">
<title>Indirect Fock</title><para>Writing <formula id="119">$|q \rangle\langle q| = |\mu&apos; \rangle[S^{-1}]_{\mu&apos;\nu&apos;}\langle \nu&apos;|$</formula>, where <formula id="120">$\mu&apos;,\nu&apos;$</formula> represent the complete set of ri basis function (ao and aux indices), the indirect fock contribution is given by (in four-index notation):  <formula id="121">\begin{align*}
\frac{\partial E_{c, 3el,-}^{UW12}}{\partial D_{\alpha \beta}^{\sigma}} &amp;=
\sum_{jk} \sum_{\mu&apos; \nu&apos;} (jk | w_{12} | \alpha \mu&apos; ) [S^{-1}]_{\mu&apos;\nu&apos;}
(\nu&apos; j | r_{12}^{-1} | k \beta) \newline
&amp;+ \sum_{ik} \sum_{\mu&apos;\nu&apos;} (\alpha k | w_{12} | i \mu&apos;)
[S^{-1}]_{\mu&apos;\nu&apos;}
(\nu&apos; \beta | r_{12}^{-1} | k i) \newline
&amp;+ \sum_{ij} \sum_{\mu&apos;\nu&apos;}( j \beta | w_{12} | i\mu&apos;)[S^{-1}]_{\mu&apos; \nu&apos;}
(\nu&apos; j | r_{12}^{-1} | \alpha i )
\end{align*}</formula> Where we refer to these separate terms as the i, j, and k contributions corresponding to the index which has been removed from the summation by differentiation. Each of these terms is made up of four separate terms corresponding to the four combinations of ri basis components:  <formula id="122">\[
|\mu&apos; \rangle[S^{-1}]_{\mu&apos;\nu&apos;}\langle \nu&apos;| =
| \mu \rangle [S^{-1}]_{\mu\nu} \langle \nu |
+ | \rho \rangle [S^{-1}]_{\rho\nu} \langle \nu |
+ | \mu \rangle [S^{-1}]_{\mu \sigma} \langle \sigma |
+ | \rho \rangle [S^{-1}]_{\rho\sigma} \langle \sigma |
\]</formula> for <formula id="54">$\mu, \nu$</formula> in aux, <formula id="105">$\rho, \sigma$</formula> in ao, and <formula id="70">$\mu&apos;, \nu&apos;$</formula> in the union of the two. Four-index integrals are evaluated from the density fitting integrals for a single pair ij, ik, or jk with parallelisation over these.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="4">$w_{12}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Integrals for <formula id="5">$r_{12}^{-1}$</formula> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abs_projectors</parametername>
</parameternamelist>
<parameterdescription>
<para>projectors <formula id="71">$S^{-1}$</formula> for each subspace </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indirect_term</parametername>
</parameternamelist>
<parameterdescription>
<para>calculate the indirect term </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calculate_fock</parametername>
</parameternamelist>
<parameterdescription>
<para>calculate the fock matrix contribution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale_opp_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>scale factor for opposite spin contribution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale_same_spin</parametername>
</parameternamelist>
<parameterdescription>
<para>scale factor for same spin contribution</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fock matrix and energy contributions for the three electron term </para>
</simplesect>
</para>
</sect3>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/three_electron/three_electron.cpp" line="170" column="28" bodyfile="src/three_electron/three_electron.cpp" bodystart="170" bodyend="189" declfile="src/three_electron/three_electron.hpp" declline="165" declcolumn="28"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/three_electron/direct_utils.cpp" line="10" column="1"/>
  </compounddef>
</doxygen>
