<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="test__three__el__indirect__utils_8cpp" kind="file" language="C++">
    <compoundname>test_three_el_indirect_utils.cpp</compoundname>
    <includes refid="catch_8hpp" local="yes">catch.hpp</includes>
    <includes refid="setup__integrals_8hpp" local="yes">setup_integrals.hpp</includes>
    <includes refid="indirect__utils_8hpp" local="yes">three_electron/indirect_utils.hpp</includes>
    <incdepgraph>
      <node id="5">
        <label>integrals/base_integrals.hpp</label>
        <link refid="base__integrals_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>integral_functions.hpp</label>
        <link refid="integral__functions_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>integrals/integrals.hpp</label>
        <link refid="integrals_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>three_electron/indirect_utils.hpp</label>
        <link refid="indirect__utils_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>three_electron/ri_utils.hpp</label>
        <link refid="ri__utils_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utils/linalg.hpp</label>
        <link refid="linalg_8hpp_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>utils/parallel.hpp</label>
        <link refid="parallel_8hpp_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>utils/utils.hpp</label>
        <link refid="utils_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>catch.hpp</label>
        <link refid="catch_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>setup_integrals.hpp</label>
        <link refid="setup__integrals_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/test_three_el_indirect_utils.cpp</label>
        <link refid="test__three__el__indirect__utils_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>catch2/catch_all.hpp</label>
      </node>
      <node id="14">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>config.hpp</label>
      </node>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="7">
        <label>mutex</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="test__three__el__indirect__utils_8cpp_1adefd5805721e032fad7b25a27158353a" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t n_ao</definition>
        <argsstring></argsstring>
        <name>n_ao</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_three_el_indirect_utils.cpp" line="13" column="18" bodyfile="tests/test_three_el_indirect_utils.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__three__el__indirect__utils_8cpp_1a0eb835f4391cded2e322c67bab2f84a1" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t n_df</definition>
        <argsstring></argsstring>
        <name>n_df</name>
        <initializer>= 11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_three_el_indirect_utils.cpp" line="14" column="18" bodyfile="tests/test_three_el_indirect_utils.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__three__el__indirect__utils_8cpp_1afd6e0157cc93983112c1ecb52e009ceb" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t n_ri</definition>
        <argsstring></argsstring>
        <name>n_ri</name>
        <initializer>= 17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_three_el_indirect_utils.cpp" line="15" column="18" bodyfile="tests/test_three_el_indirect_utils.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__three__el__indirect__utils_8cpp_1a9ac328331bdb42de91c51a93e33b40a2" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto W_seed</definition>
        <argsstring></argsstring>
        <name>W_seed</name>
        <initializer>= uw12_test::seed + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_three_el_indirect_utils.cpp" line="16" column="16" bodyfile="tests/test_three_el_indirect_utils.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__three__el__indirect__utils_8cpp_1a94b91a907a534d14bd9324688f7942a0" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto V_seed</definition>
        <argsstring></argsstring>
        <name>V_seed</name>
        <initializer>= uw12_test::seed</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_three_el_indirect_utils.cpp" line="17" column="16" bodyfile="tests/test_three_el_indirect_utils.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__three__el__indirect__utils_8cpp_1a41d106865b1c8d7d1c65bc8b21aa7a17" prot="public" static="no" mutable="no">
        <type>const auto</type>
        <definition>const auto abs_projectors</definition>
        <argsstring></argsstring>
        <name>abs_projectors</name>
        <initializer>= uw12_test::setup_abs_projector(n_ao, n_ri)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_three_el_indirect_utils.cpp" line="19" column="12" bodyfile="tests/test_three_el_indirect_utils.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__three__el__indirect__utils_8cpp_1a60a850bcea89cfd18dbc4d3df505c76f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test three electron term - Indirect Utils (Indirect energy)&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test three electron term - Indirect Utils (Indirect energy)&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_three_el_indirect_utils.cpp" line="21" column="1" bodyfile="tests/test_three_el_indirect_utils.cpp" bodystart="21" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="test__three__el__indirect__utils_8cpp_1a5120ff126b6c18d6e0d80eeb4be8ebea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test three electron term - Indirect Utils (Indirect Fock)&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test three electron term - Indirect Utils (Indirect Fock)&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_three_el_indirect_utils.cpp" line="40" column="1" bodyfile="tests/test_three_el_indirect_utils.cpp" bodystart="40" bodyend="90"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Zack<sp/>Williams<sp/>on<sp/>27/03/2024.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;catch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;setup_integrals.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;three_electron/indirect_utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uw12_test::setup_abs_projector;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uw12_test::setup_base_integrals;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uw12_test::setup_base_integrals_direct;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ao<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_df<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ri<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W_seed<sp/>=<sp/>uw12_test::seed<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V_seed<sp/>=<sp/>uw12_test::seed;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_projectors<sp/>=<sp/>uw12_test::setup_abs_projector(n_ao,<sp/>n_ri);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>three<sp/>electron<sp/>term<sp/>-<sp/>Indirect<sp/>Utils<sp/>(Indirect<sp/>energy)&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>n_occ<sp/>=<sp/>{4};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>n_active<sp/>=<sp/>{3};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[W,<sp/>V]<sp/>=<sp/>uw12_test::setup_integrals_pair(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_ao,<sp/>n_df,<sp/>n_ri,<sp/>n_occ,<sp/>n_active,<sp/>W_seed</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>uw12::three_el::indirect_3el_energy(W,<sp/>V,<sp/>abs_projectors);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>e2<sp/>=<sp/>uw12::three_el::indirect_3el_energy(V,<sp/>W,<sp/>abs_projectors);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_THAT(e,<sp/>Catch::Matchers::WithinRel(e2,<sp/>uw12_test::eps));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>n_occ.push_back(3);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>n_active.push_back(2);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>three<sp/>electron<sp/>term<sp/>-<sp/>Indirect<sp/>Utils<sp/>(Indirect<sp/>Fock)&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>n_occ<sp/>=<sp/>{4};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>n_active<sp/>=<sp/>{3};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W2<sp/>=<sp/>uw12::linalg::random_pd(n_df,<sp/>W_seed);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W3<sp/>=<sp/>uw12::linalg::random(n_ao<sp/>*<sp/>(n_ao<sp/>+<sp/>1)<sp/>/<sp/>2,<sp/>n_df,<sp/>W_seed);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W3_ri<sp/>=<sp/>uw12::linalg::random(n_ao<sp/>*<sp/>n_ri,<sp/>n_df,<sp/>W_seed);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W_base<sp/>=<sp/><ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">uw12::integrals::BaseIntegrals</ref>(W3,<sp/>W2,<sp/>W3_ri);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W_base_direct<sp/>=<sp/>setup_base_integrals_direct(W_base,<sp/>W2);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V2<sp/>=<sp/>uw12::linalg::random_pd(n_df,<sp/>V_seed);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V3<sp/>=<sp/>uw12::linalg::random(n_ao<sp/>*<sp/>(n_ao<sp/>+<sp/>1)<sp/>/<sp/>2,<sp/>n_df,<sp/>V_seed);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V3_ri<sp/>=<sp/>uw12::linalg::random(n_ao<sp/>*<sp/>n_ri,<sp/>n_df,<sp/>V_seed);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V_base<sp/>=<sp/><ref refid="classuw12_1_1integrals_1_1_base_integrals" kindref="compound">uw12::integrals::BaseIntegrals</ref>(V3,<sp/>V2,<sp/>V3_ri);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V_base_direct<sp/>=<sp/>setup_base_integrals_direct(V_base,<sp/>V2);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_projectors<sp/>=<sp/>setup_abs_projector(n_ao,<sp/>n_ri);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_spin<sp/>=<sp/>uw12::utils::spin_channels(n_occ);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(uw12::utils::spin_channels(n_active)<sp/>==<sp/>n_spin);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[Co,<sp/>active_Co]<sp/>=</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uw12_test::setup_orbitals(n_occ,<sp/>n_active,<sp/>n_ao);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W<sp/>=<sp/><ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">uw12::integrals::Integrals</ref>(W_base,<sp/>Co,<sp/>active_Co);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V<sp/>=<sp/><ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">uw12::integrals::Integrals</ref>(V_base,<sp/>Co,<sp/>active_Co);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>W_direct<sp/>=</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">uw12::integrals::Integrals</ref>(W_base_direct,<sp/>Co,<sp/>active_Co);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V_direct<sp/>=</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuw12_1_1integrals_1_1_integrals" kindref="compound">uw12::integrals::Integrals</ref>(V_base_direct,<sp/>Co,<sp/>active_Co);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>0;<sp/>sigma<sp/>&lt;<sp/>n_spin;<sp/>++sigma)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fock<sp/>=</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uw12::three_el::indirect_3el_fock_matrix(W,<sp/>V,<sp/>abs_projectors,<sp/>sigma);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(uw12::linalg::n_rows(fock)<sp/>==<sp/>n_ao);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(uw12::linalg::n_cols(fock)<sp/>==<sp/>n_ao);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fock2<sp/>=<sp/>uw12::three_el::indirect_3el_fock_matrix(</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W_direct,<sp/>V_direct,<sp/>abs_projectors,<sp/>sigma</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(uw12::linalg::nearly_equal(fock,<sp/>fock2,<sp/>uw12_test::epsilon));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>n_occ.push_back(3);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>n_active.push_back(2);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/test_three_el_indirect_utils.cpp"/>
  </compounddef>
</doxygen>
