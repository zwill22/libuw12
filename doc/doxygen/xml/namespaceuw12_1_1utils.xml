<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="namespaceuw12_1_1utils" kind="namespace" language="C++">
    <compoundname>uw12::utils</compoundname>
    <innerclass refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" prot="public">uw12::utils::FockMatrixAndEnergy</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="utils_8hpp_1a83e29ff3e20b27d0a77010f6e7ab2648" prot="public" static="no">
        <type>std::vector&lt; linalg::Mat &gt;</type>
        <definition>using uw12::utils::MatVec =  std::vector&lt;linalg::Mat&gt;</definition>
        <argsstring></argsstring>
        <name>MatVec</name>
        <qualifiedname>uw12::utils::MatVec</qualifiedname>
        <briefdescription>
<para>Matrix vector for storing multiple matrices in a single object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="82" column="1" bodyfile="src/utils/utils.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="utils_8hpp_1a1d05247bbe7fc30f0ec43cfa33805bb0" prot="public" static="no">
        <type>linalg::Vec</type>
        <definition>using uw12::utils::OccupationVector =  linalg::Vec</definition>
        <argsstring></argsstring>
        <name>OccupationVector</name>
        <qualifiedname>uw12::utils::OccupationVector</qualifiedname>
        <briefdescription>
<para>} </para>
        </briefdescription>
        <detaileddescription>
<para>OccupationVector for storing occupation numbers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="126" column="1" bodyfile="src/utils/utils.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="utils_8hpp_1af34c61b6aab4d5aa26ea5996523a6209" prot="public" static="no">
        <type>MatVec</type>
        <definition>using uw12::utils::Orbitals =  MatVec</definition>
        <argsstring></argsstring>
        <name>Orbitals</name>
        <qualifiedname>uw12::utils::Orbitals</qualifiedname>
        <briefdescription>
<para>Object to store orbital coefficients for each spin channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="129" column="1" bodyfile="src/utils/utils.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="utils_8hpp_1a09c5b4117b83f678efebe66088d59779" prot="public" static="no">
        <type>std::vector&lt; OccupationVector &gt;</type>
        <definition>using uw12::utils::Occupations =  std::vector&lt;OccupationVector&gt;</definition>
        <argsstring></argsstring>
        <name>Occupations</name>
        <qualifiedname>uw12::utils::Occupations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Object to store occupation numbers for occupied orbitals for each spin channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="133" column="1" bodyfile="src/utils/utils.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="utils_8hpp_1a490c5c9b980645e58473179a1cdb8343" prot="public" static="no">
        <type>MatVec</type>
        <definition>using uw12::utils::DensityMatrix =  MatVec</definition>
        <argsstring></argsstring>
        <name>DensityMatrix</name>
        <qualifiedname>uw12::utils::DensityMatrix</qualifiedname>
        <briefdescription>
<para>Object to store the density matrix for each spin channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="136" column="1" bodyfile="src/utils/utils.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="utils_8hpp_1a958b58b7ce2116a51936f1817b8709ca" prot="public" static="no">
        <type>MatVec</type>
        <definition>using uw12::utils::FockMatrix =  MatVec</definition>
        <argsstring></argsstring>
        <name>FockMatrix</name>
        <qualifiedname>uw12::utils::FockMatrix</qualifiedname>
        <briefdescription>
<para>Object to store Fock matrix for each spin channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="139" column="1" bodyfile="src/utils/utils.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="utils_8hpp_1a4b3aa4cf726fe500e489d79abd163958" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::square</definition>
        <argsstring>(const linalg::Vec &amp;vec, const double factor=1)</argsstring>
        <name>square</name>
        <qualifiedname>uw12::utils::square</qualifiedname>
        <param>
          <type>const linalg::Vec &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>factor</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a square symmetric matrix from a vector</para>
<para>Generate a square symmetric matrix of size <computeroutput>n * n</computeroutput> from a vector of size <computeroutput>n * (n+1) /2</computeroutput> where the elements are the lower triangular elements of the output matrix in column major ordering. Inverse of <computeroutput>lower</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of lower triangular elements of symmetric matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-diagonal factor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resulting symmetric matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="23" column="13" bodyfile="src/utils/utils.hpp" bodystart="23" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a617de56d7474f77e7ef824b474353cd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::lower</definition>
        <argsstring>(const linalg::Mat &amp;mat, const double factor=1)</argsstring>
        <name>lower</name>
        <qualifiedname>uw12::utils::lower</qualifiedname>
        <param>
          <type>const linalg::Mat &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>factor</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compress symmetric matrix into vector of lower triangular elements</para>
<para>Store <computeroutput>n * n</computeroutput> symmetric matrix as a vector of lower triangular elements of size <computeroutput>n * (n+1) /2</computeroutput>. Inverse of <computeroutput>square</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="58" column="13" bodyfile="src/utils/utils.hpp" bodystart="58" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1aab1a1f696e6ac3788c19dfa494a93fde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::operator*</definition>
        <argsstring>(const MatVec &amp;object, const double factor)</argsstring>
        <name>operator*</name>
        <qualifiedname>uw12::utils::operator*</qualifiedname>
        <param>
          <type>const MatVec &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar multiplication of MatVec { </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="86" column="13" bodyfile="src/utils/utils.hpp" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1abca5ac8fe179d53e82dff232663bd4e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::operator*</definition>
        <argsstring>(const double factor, const MatVec &amp;object)</argsstring>
        <name>operator*</name>
        <qualifiedname>uw12::utils::operator*</qualifiedname>
        <param>
          <type>const double</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>const MatVec &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="94" column="13" bodyfile="src/utils/utils.hpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a82233fb82b029e5e746c2342c56dbced" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; uw12::utils::operator+=</definition>
        <argsstring>(MatVec &amp;lhs, const MatVec &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>uw12::utils::operator+=</qualifiedname>
        <param>
          <type>MatVec &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const MatVec &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>} </para>
        </briefdescription>
        <detaileddescription>
<para>Fock matrix addition { </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="101" column="13" bodyfile="src/utils/utils.hpp" bodystart="101" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a8b151fcd82d9c3c364f26e4edc21c3f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::operator+</definition>
        <argsstring>(MatVec left, const MatVec &amp;right)</argsstring>
        <name>operator+</name>
        <qualifiedname>uw12::utils::operator+</qualifiedname>
        <param>
          <type>MatVec</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const MatVec &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="118" column="13" bodyfile="src/utils/utils.hpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a515b6db1ed7442c1a56d36dd4f369452" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::operator*</definition>
        <argsstring>(const FockMatrixAndEnergy &amp;fock, const double factor) -&gt; FockMatrixAndEnergy</argsstring>
        <name>operator*</name>
        <qualifiedname>uw12::utils::operator*</qualifiedname>
        <param>
          <type>const <ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> &amp;</type>
          <declname>fock</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar multiplication of <ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> { </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="149" column="13" bodyfile="src/utils/utils.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1afca9f5c76884c4479ef6696e2fd6c585" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::operator*</definition>
        <argsstring>(const double factor, const FockMatrixAndEnergy &amp;fock)</argsstring>
        <name>operator*</name>
        <qualifiedname>uw12::utils::operator*</qualifiedname>
        <param>
          <type>const double</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> &amp;</type>
          <declname>fock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="154" column="13" bodyfile="src/utils/utils.hpp" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a77c322fbe8e1f54669157854edf9f63e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::operator+=</definition>
        <argsstring>(FockMatrixAndEnergy &amp;lhs, const FockMatrixAndEnergy &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>uw12::utils::operator+=</qualifiedname>
        <param>
          <type><ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>} </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> addition { </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="161" column="13" bodyfile="src/utils/utils.hpp" bodystart="161" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a4ee6fafb4d5d0cb54cea436092246dab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::operator+</definition>
        <argsstring>(FockMatrixAndEnergy lhs, const FockMatrixAndEnergy &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>uw12::utils::operator+</qualifiedname>
        <param>
          <type><ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="170" column="13" bodyfile="src/utils/utils.hpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a92d390af753201b13520cc6a84fab758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto uw12::utils::nearly_zero</definition>
        <argsstring>(T value, int epsilon=4)</argsstring>
        <name>nearly_zero</name>
        <qualifiedname>uw12::utils::nearly_zero</qualifiedname>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>epsilon</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
<para>} </para>
        </briefdescription>
        <detaileddescription>
<para>Check whether a value is approximately zero</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Multiplicative factor to control numerical limit</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether value is nearly zero </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="185" column="6" bodyfile="src/utils/utils.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a0c5d30a9e9313f8a84736bc2aca0ca0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto uw12::utils::spin_channels</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>spin_channels</name>
        <qualifiedname>uw12::utils::spin_channels</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate and check the number of spin channels of an object</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object of size <computeroutput>n_spin</computeroutput></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of spin channels <computeroutput>n_spin</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="196" column="6" bodyfile="src/utils/utils.hpp" bodystart="196" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a460607c309bea9ebb773d5186a00d5f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::symmetrise_fock</definition>
        <argsstring>(FockMatrixAndEnergy fock)</argsstring>
        <name>symmetrise_fock</name>
        <qualifiedname>uw12::utils::symmetrise_fock</qualifiedname>
        <param>
          <type><ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref></type>
          <declname>fock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make Fock matrix symmetric (inplace)</para>
<para>Using <formula id="130">$0.5 (F + F^T)$</formula>, make the Fock matrix in a <ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> object symmetric</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fock</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Symmetric <ref refid="structuw12_1_1utils_1_1_fock_matrix_and_energy" kindref="compound">FockMatrixAndEnergy</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="213" column="13" bodyfile="src/utils/utils.hpp" bodystart="213" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a7d557957acd12565250bb7b1a239cdb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::freeze_core</definition>
        <argsstring>(const Orbitals &amp;orbitals, const std::vector&lt; size_t &gt; &amp;n_active)</argsstring>
        <name>freeze_core</name>
        <qualifiedname>uw12::utils::freeze_core</qualifiedname>
        <param>
          <type>const Orbitals &amp;</type>
          <declname>orbitals</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>n_active</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Freeze core orbitals of an Orbitals object</para>
<para>Freeze the core orbitals out of an Orbitals object by removing these orbitals from the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orbitals</parametername>
</parameternamelist>
<parameterdescription>
<para>Orbitals object containing core and valence orbitals </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_active</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of active (spin) orbitals in each spin channel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Active Orbitals </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="233" column="13" bodyfile="src/utils/utils.hpp" bodystart="233" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1af755f191f434e1e68fcfb67b5c8fdab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::construct_density</definition>
        <argsstring>(const Orbitals &amp;orbitals)</argsstring>
        <name>construct_density</name>
        <qualifiedname>uw12::utils::construct_density</qualifiedname>
        <param>
          <type>const Orbitals &amp;</type>
          <declname>orbitals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct the density matrix from the (occupation weighted) Orbitals</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orbitals</parametername>
</parameternamelist>
<parameterdescription>
<para>Orbitals object containing coefficients for each spin channel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Density matrix for each spin channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="259" column="13" bodyfile="src/utils/utils.hpp" bodystart="259" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1abf377722b8ad804bc1e78f446b1b738d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto uw12::utils::occupation_weighted_orbitals</definition>
        <argsstring>(const Orbitals &amp;orb, const Occupations &amp;occ)</argsstring>
        <name>occupation_weighted_orbitals</name>
        <qualifiedname>uw12::utils::occupation_weighted_orbitals</qualifiedname>
        <param>
          <type>const Orbitals &amp;</type>
          <declname>orb</declname>
        </param>
        <param>
          <type>const Occupations &amp;</type>
          <declname>occ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct occupation weighted orbitals from a set of orbitals and occupations</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orb</parametername>
</parameternamelist>
<parameterdescription>
<para>Orbital coefficients </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>occ</parametername>
</parameternamelist>
<parameterdescription>
<para>Occupation vectors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils/utils.hpp" line="287" column="13" bodyfile="src/utils/utils.hpp" bodystart="287" bodyend="308"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/utils/utils.hpp" line="12" column="1"/>
  </compounddef>
</doxygen>
