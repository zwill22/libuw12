<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="test__ri__utils_8cpp" kind="file" language="C++">
    <compoundname>test_ri_utils.cpp</compoundname>
    <includes refid="catch_8hpp" local="yes">catch.hpp</includes>
    <includes refid="ri__utils_8hpp" local="yes">three_electron/ri_utils.hpp</includes>
    <includes refid="linalg_8hpp" local="yes">utils/linalg.hpp</includes>
    <incdepgraph>
      <node id="4">
        <label>three_electron/ri_utils.hpp</label>
        <link refid="ri__utils_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>utils/linalg.hpp</label>
        <link refid="linalg_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>catch.hpp</label>
        <link refid="catch_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>tests/test_ri_utils.cpp</label>
        <link refid="test__ri__utils_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>catch2/catch_all.hpp</label>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="6">
        <label>config.hpp</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__ri__utils_8cpp_1af20f6e8e5b2dc7177d37b0422114bf80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;Test RI utils - Test ABS projectors&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;Test RI utils - Test ABS projectors&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/test_ri_utils.cpp" line="12" column="1" bodyfile="tests/test_ri_utils.cpp" bodystart="12" bodyend="44"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Zack<sp/>Williams<sp/>on<sp/>26/03/2024.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;catch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;three_electron/ri_utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/linalg.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uw12::linalg::n_cols;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uw12::linalg::n_rows;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;Test<sp/>RI<sp/>utils<sp/>-<sp/>Test<sp/>ABS<sp/>projectors&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ao<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_ri<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>uw12::linalg::random_pd(n_ao<sp/>+<sp/>n_ri,<sp/>uw12_test::seed);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>REQUIRE(uw12::linalg::n_rows(s)<sp/>==<sp/>n_ao<sp/>+<sp/>n_ri);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>REQUIRE(uw12::linalg::n_cols(s)<sp/>==<sp/>n_ao<sp/>+<sp/>n_ri);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_proj<sp/>=</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uw12::three_el::ri::calculate_abs_projectors(s,<sp/>n_ao,<sp/>n_ri);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_inv_ao_ao<sp/>=<sp/>abs_proj.s_inv_ao_ao;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>REQUIRE(n_rows(s_inv_ao_ao)<sp/>==<sp/>n_ao);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>REQUIRE(n_cols(s_inv_ao_ao)<sp/>==<sp/>n_ao);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_inv_ao_ri<sp/>=<sp/>abs_proj.s_inv_ao_ri;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>REQUIRE(n_rows(s_inv_ao_ri)<sp/>==<sp/>n_ao);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>REQUIRE(n_cols(s_inv_ao_ri)<sp/>==<sp/>n_ri);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_inv_ri_ao<sp/>=<sp/>abs_proj.s_inv_ri_ao;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>REQUIRE(n_rows(s_inv_ri_ao)<sp/>==<sp/>n_ri);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>REQUIRE(n_cols(s_inv_ri_ao)<sp/>==<sp/>n_ao);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_inv_ri_ri<sp/>=<sp/>abs_proj.s_inv_ri_ri;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>REQUIRE(n_rows(s_inv_ri_ri)<sp/>==<sp/>n_ri);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>REQUIRE(n_cols(s_inv_ri_ri)<sp/>==<sp/>n_ri);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>CHECK_THROWS(uw12::three_el::ri::calculate_abs_projectors(s,<sp/>n_ao<sp/>+<sp/>1,<sp/>n_ri));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>CHECK_THROWS(uw12::three_el::ri::calculate_abs_projectors(s,<sp/>n_ao<sp/>-<sp/>1,<sp/>n_ri));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>CHECK_THROWS(uw12::three_el::ri::calculate_abs_projectors(s,<sp/>n_ao,<sp/>n_ri<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>CHECK_THROWS(uw12::three_el::ri::calculate_abs_projectors(s,<sp/>n_ao,<sp/>n_ri<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/test_ri_utils.cpp"/>
  </compounddef>
</doxygen>
